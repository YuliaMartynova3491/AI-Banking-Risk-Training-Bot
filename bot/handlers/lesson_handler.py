# –§–∞–π–ª: bot/handlers/lesson_handler.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤ —Å AI-–∞–≥–µ–Ω—Ç–æ–º - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import logging
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
from telegram.error import BadRequest

from core.database import db_service
from config.bot_config import LEARNING_STRUCTURE, MESSAGES, ALIAS_TO_TOPIC
from bot.keyboards.menu_keyboards import get_lessons_keyboard
from ai_agent.agent_graph import learning_agent

logger = logging.getLogger(__name__)

def get_lesson_start_keyboard(topic_id: str, lesson_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞"""
    from config.bot_config import TOPIC_ALIASES
    topic_alias = TOPIC_ALIASES.get(topic_id)
    
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"action:start_quiz;tid:{topic_alias};lesson_id:{lesson_id}")],
        [InlineKeyboardButton("üìñ –ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=f"action:show_material;tid:{topic_alias};lesson_id:{lesson_id}")],
        [InlineKeyboardButton("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI", callback_data=f"action:ask_ai;tid:{topic_alias};lesson_id:{lesson_id}")],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫–∞–º", callback_data=f"action:back_to_lessons;tid:{topic_alias}"),
            InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="action:back_to_menu")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_ai_help_keyboard(topic_id: str = None, lesson_id: int = None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–º–æ—â–∏ AI"""
    keyboard = [
        [InlineKeyboardButton("üí° –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è", callback_data="action:quick_question;type:basics")],
        [InlineKeyboardButton("üìñ –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data="action:quick_question;type:examples")],
        [InlineKeyboardButton("‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="action:ask_custom_question")],
    ]
    
    if topic_id and lesson_id:
        from config.bot_config import TOPIC_ALIASES
        topic_alias = TOPIC_ALIASES.get(topic_id)
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"action:lesson;tid:{topic_alias};lesson_id:{lesson_id}")])
    else:
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="action:back_to_topics")])
    
    return InlineKeyboardMarkup(keyboard)

def parse_callback_data(data: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç callback data"""
    result = {}
    parts = data.split(';')
    
    for part in parts:
        if ':' in part:
            key, value = part.split(':', 1)
            result[key] = value.strip()
    
    return result

async def handle_lesson_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback-–∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Ä–æ–∫–∞–º–∏"""
    query = update.callback_query
    await query.answer()

    logger.info(f"lesson_handler: –ü–æ–ª—É—á–µ–Ω callback: {query.data}")

    data = parse_callback_data(query.data)
    action = data.get("action")
    
    topic_id = ALIAS_TO_TOPIC.get(data.get("tid"))
    lesson_id = int(data.get("lesson_id", 0)) if data.get("lesson_id") else None

    try:
        if action == "lesson":
            await show_lesson_intro(query, context, topic_id, lesson_id)
        elif action == "show_material":
            await show_lesson_material(query, context, topic_id, lesson_id)
        elif action == "ask_ai":
            await handle_ask_ai(query, context, topic_id, lesson_id)
        elif action == "quick_question":
            await handle_quick_ai_question(query, context, data.get("type"))
        elif action == "ask_custom_question":
            await handle_custom_ai_question(query, context)
        elif action == "back_to_lessons":
            await handle_back_to_lessons(query, context, topic_id)
        elif action == "start_quiz":
            await start_simple_quiz(query, context, topic_id, lesson_id)
        elif action == "lesson_locked":
            await query.answer("üîí –≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ.", show_alert=True)
        elif action == "quiz_answer":
            await handle_quiz_answer(query, context, data)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_lesson_callback: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass

async def show_lesson_intro(query, context, topic_id: str, lesson_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –∫ —É—Ä–æ–∫—É"""
    try:
        topic_data = LEARNING_STRUCTURE.get(topic_id)
        if not topic_data:
            await query.edit_message_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        lesson_data = None
        for lesson in topic_data["lessons"]:
            if lesson["id"] == lesson_id:
                lesson_data = lesson
                break
        
        if not lesson_data:
            await query.edit_message_text("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞
        user_progress = db_service.get_user_progress(query.from_user.id)
        lesson_status = ""
        
        if user_progress and "topics_progress" in user_progress:
            topic_progress = user_progress["topics_progress"].get(topic_id, {})
            lessons_data = topic_progress.get("lessons", {})
            lesson_data_progress = lessons_data.get(lesson_id, {})
            
            if lesson_data_progress.get("is_completed"):
                lesson_status = "‚úÖ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω\n"
            elif lesson_data_progress.get("attempts", 0) > 0:
                lesson_status = f"üîÑ –ü–æ–ø—ã—Ç–æ–∫: {lesson_data_progress['attempts']}, –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {lesson_data_progress.get('best_score', 0)}%\n"
        
        message = f"""üìö **{lesson_data['title']}**

{lesson_status}üìñ **–û–ø–∏—Å–∞–Ω–∏–µ:**
{lesson_data['description']}

üéØ **–¶–µ–ª–∏ —É—Ä–æ–∫–∞:**
{lesson_data.get('objectives', '–ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.')}

‚è±Ô∏è **–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è:** ~{lesson_data.get('duration', 15)} –º–∏–Ω—É—Ç

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        keyboard = get_lesson_start_keyboard(topic_id, lesson_id)
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_lesson_intro: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞.")

async def show_lesson_material(query, context, topic_id: str, lesson_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞"""
    try:
        topic_data = LEARNING_STRUCTURE.get(topic_id)
        if not topic_data:
            await query.edit_message_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        lesson_data = None
        for lesson in topic_data["lessons"]:
            if lesson["id"] == lesson_id:
                lesson_data = lesson
                break
        
        if not lesson_data:
            await query.edit_message_text("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞
        content = lesson_data.get('content', '–ú–∞—Ç–µ—Ä–∏–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        if len(content) > 3500:
            content = content[:3500] + "\n\n... *–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∫—Ä–∞—â–µ–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è*"
        
        message = f"""üìñ **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞: {lesson_data['title']}**

{content}

üí° –ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-–ø–æ–º–æ—â–Ω–∏–∫—É
‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É"""
        
        keyboard = get_lesson_start_keyboard(topic_id, lesson_id)
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")

async def handle_ask_ai(query, context, topic_id: str = None, lesson_id: int = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏ AI"""
    try:
        keyboard = get_ai_help_keyboard(topic_id, lesson_id)
        message = """ü§ñ **AI-–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–∏—Å–∫–∞–º**

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:
‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è
‚Ä¢ –ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"""
        
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ handle_ask_ai: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞.")

async def handle_quick_ai_question(query, context, question_type: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ AI"""
    try:
        await query.edit_message_text("ü§ñ AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        questions = {
            "basics": "–û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è —Ä–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏",
            "examples": "–ü—Ä–∏–≤–µ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏"
        }
        
        question = questions.get(question_type, "–ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI-–∞–≥–µ–Ω—Ç–∞
        try:
            response = await asyncio.wait_for(
                get_ai_response(query.from_user.id, question),
                timeout=20.0
            )
        except asyncio.TimeoutError:
            response = "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if len(response) > 3500:
            response = response[:3500] + "..."
        
        message = f"""ü§ñ **AI-–ü–æ–º–æ—â–Ω–∏–∫**

{response}

‚ùì –ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–∂–º–∏—Ç–µ "–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"."""
        
        keyboard = get_ai_help_keyboard()
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ handle_quick_ai_question: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.")

async def handle_custom_ai_question(query, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ AI"""
    try:
        message = """‚úçÔ∏è **–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å**

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–∏—Å–∫–∞–º, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç.

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫?"
‚Ä¢ "–ö–∞–∫ –±–∞–Ω–∫–∏ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç —Ä–∏—Å–∫–∏?"
‚Ä¢ "–ö–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –≤–∏–¥—ã —Ä–∏—Å–∫–æ–≤?"

üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        context.user_data['waiting_for_ai_question'] = True
        
        keyboard = get_ai_help_keyboard()
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ handle_custom_ai_question: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞.")

async def handle_user_ai_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI"""
    if not context.user_data.get('waiting_for_ai_question'):
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    context.user_data['waiting_for_ai_question'] = False
    
    user_question = update.message.text
    user_id = update.effective_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_message = await update.message.reply_text("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            response = await asyncio.wait_for(
                get_ai_response(user_id, user_question),
                timeout=25.0
            )
        except asyncio.TimeoutError:
            response = "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            await processing_message.delete()
        except:
            pass
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if len(response) > 3500:
            response = response[:3500] + "..."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        final_message = f"""ü§ñ **–û—Ç–≤–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫–∞**

**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {user_question}

**–û—Ç–≤–µ—Ç:** {response}

üí° *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–æ–≤*"""
        
        keyboard = get_ai_help_keyboard()
        await update.message.reply_text(final_message, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI-–≤–æ–ø—Ä–æ—Å–∞: {e}")
        try:
            await processing_message.delete()
        except:
            pass
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def get_ai_response(user_id: int, question: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI-–∞–≥–µ–Ω—Ç–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        response = learning_agent.provide_learning_assistance(
            user_id=str(user_id),
            question=question,
            topic="–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–∏—Å–∫–∏"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
        if len(response.strip()) < 10:
            return "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É."
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI-–æ—Ç–≤–µ—Ç–∞: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

async def handle_back_to_lessons(query, context, topic_id: str):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ —Ç–µ–º—ã"""
    try:
        user_id = query.from_user.id
        user_progress = db_service.get_user_progress(user_id)
        
        topic_data = LEARNING_STRUCTURE.get(topic_id)
        if not topic_data:
            await query.edit_message_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        message = f"""üìö **{topic_data['title']}**

–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:

{topic_data.get('description', '')}"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ menu_keyboards
        keyboard = get_lessons_keyboard(topic_id, user_progress)
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ handle_back_to_lessons: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤.")

# –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def start_simple_quiz(query, context, topic_id: str, lesson_id: int):
    """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    try:
        # –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        questions = [
            {
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
                "options": [
                    "–†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                    "–†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥",
                    "–†–∏—Å–∫ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                    "–†–∏—Å–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–Ω–∫–∞"
                ],
                "correct": 0,
                "explanation": "–†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ - —ç—Ç–æ —Ä–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–∞–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."
            },
            {
                "question": "–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∞—Ä—É—à–µ–Ω–∏—é –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?",
                "options": [
                    "–¢–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏",
                    "–¢–æ–ª—å–∫–æ —Å—Ç–∏—Ö–∏–π–Ω—ã–µ –±–µ–¥—Å—Ç–≤–∏—è",
                    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏, —Å—Ç–∏—Ö–∏–π–Ω—ã–µ –±–µ–¥—Å—Ç–≤–∏—è, –∫–∏–±–µ—Ä–∞—Ç–∞–∫–∏, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä",
                    "–¢–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä"
                ],
                "correct": 2,
                "explanation": "–ù–∞—Ä—É—à–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Å–±–æ—è–º–∏, —Å—Ç–∏—Ö–∏–π–Ω—ã–º–∏ –±–µ–¥—Å—Ç–≤–∏—è–º–∏, –∫–∏–±–µ—Ä–∞—Ç–∞–∫–∞–º–∏ –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —Ñ–∞–∫—Ç–æ—Ä–æ–º."
            }
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['quiz_data'] = {
            'topic_id': topic_id,
            'lesson_id': lesson_id,
            'questions': questions,
            'current_question': 0,
            'correct_answers': 0
        }
        
        await show_quiz_question(query, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ start_simple_quiz: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

async def show_quiz_question(query, context):
    """–ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        quiz_data = context.user_data.get('quiz_data')
        if not quiz_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        current_q = quiz_data['current_question']
        questions = quiz_data['questions']
        
        if current_q >= len(questions):
            await show_quiz_results(query, context)
            return
        
        question = questions[current_q]
        
        text = f"‚ùì **–í–æ–ø—Ä–æ—Å {current_q + 1} –∏–∑ {len(questions)}**\n\n{question['question']}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        for i, option in enumerate(question['options']):
            keyboard.append([InlineKeyboardButton(f"{i+1}. {option}", callback_data=f"action:quiz_answer;answer:{i}")])
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ show_quiz_question: {e}")

async def handle_quiz_answer(query, context, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    try:
        quiz_data = context.user_data.get('quiz_data')
        if not quiz_data:
            return
        
        answer = int(data.get('answer', -1))
        current_q = quiz_data['current_question']
        question = quiz_data['questions'][current_q]
        
        is_correct = (answer == question['correct'])
        if is_correct:
            quiz_data['correct_answers'] += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
        result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['options'][question['correct']]}"
        result_text += f"\n\nüí° {question['explanation']}\n\n"
        
        quiz_data['current_question'] += 1
        
        if quiz_data['current_question'] >= len(quiz_data['questions']):
            result_text += "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            keyboard = [[InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data="action:finish_quiz")]]
        else:
            result_text += "–ù–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
            keyboard = [[InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="action:next_question")]]
        
        await query.edit_message_text(result_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ handle_quiz_answer: {e}")

async def show_quiz_results(query, context):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        quiz_data = context.user_data.get('quiz_data')
        if not quiz_data:
            return
        
        correct = quiz_data['correct_answers']
        total = len(quiz_data['questions'])
        score = (correct / total) * 100
        passed = score >= 70  # 70% –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        user_id = query.from_user.id
        topic_id = quiz_data['topic_id']
        lesson_id = quiz_data['lesson_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞
        user_progress = db_service.get_user_progress(user_id) or {}
        
        if "topics_progress" not in user_progress:
            user_progress["topics_progress"] = {}
        
        if topic_id not in user_progress["topics_progress"]:
            user_progress["topics_progress"][topic_id] = {
                "lessons": {},
                "completed_lessons": 0,
                "total_attempts": 0,
                "average_score": 0
            }
        
        topic_progress = user_progress["topics_progress"][topic_id]
        
        if "lessons" not in topic_progress:
            topic_progress["lessons"] = {}
        
        if lesson_id not in topic_progress["lessons"]:
            topic_progress["lessons"][lesson_id] = {
                "attempts": 0,
                "best_score": 0,
                "is_completed": False
            }
        
        lesson_progress = topic_progress["lessons"][lesson_id]
        lesson_progress["attempts"] += 1
        lesson_progress["best_score"] = max(lesson_progress["best_score"], score)
        
        if passed and not lesson_progress["is_completed"]:
            lesson_progress["is_completed"] = True
            topic_progress["completed_lessons"] += 1
            user_progress["total_lessons_completed"] = user_progress.get("total_lessons_completed", 0) + 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        db_service.update_user_progress(user_id, user_progress)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if passed:
            result_text = f"""üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω!**

üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score:.0f}% ({correct}/{total})
‚úÖ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"""
        else:
            result_text = f"""üòî **–£—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω**

üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score:.0f}% ({correct}/{total})
üìù –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å 70%

üí° –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"""
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        from config.bot_config import TOPIC_ALIASES
        topic_alias = TOPIC_ALIASES.get(topic_id)
        
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫–∞–º", callback_data=f"action:back_to_lessons;tid:{topic_alias}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="action:back_to_menu")]
        ]
        
        if not passed:
            keyboard.insert(0, [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"action:start_quiz;tid:{topic_alias};lesson_id:{lesson_id}")])
        
        await query.edit_message_text(result_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–≤–∏–∑–∞
        context.user_data.pop('quiz_data', None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ show_quiz_results: {e}")

async def handle_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É"""
    query = update.callback_query
    await query.answer()
    await show_quiz_question(query, context)

async def handle_finish_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞"""
    query = update.callback_query
    await query.answer()
    await show_quiz_results(query, context)

def register_lesson_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—Ä–æ–∫–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Ä–æ–∫–æ–≤
    application.add_handler(CallbackQueryHandler(
        handle_lesson_callback, 
        pattern=r'^action:(lesson|show_material|ask_ai|quick_question|ask_custom_question|back_to_lessons|start_quiz|lesson_locked|quiz_answer).*'
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–≤–∏–∑–∞
    application.add_handler(CallbackQueryHandler(handle_next_question, pattern=r'^action:next_question'))
    application.add_handler(CallbackQueryHandler(handle_finish_quiz, pattern=r'^action:finish_quiz'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI-–≤–æ–ø—Ä–æ—Å–æ–≤
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_user_ai_question
    ))