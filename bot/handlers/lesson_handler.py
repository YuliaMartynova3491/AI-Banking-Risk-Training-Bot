"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤ –∏ –æ–±—É—á–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters

from core.database import db_service
from config.bot_config import LEARNING_STRUCTURE, MESSAGES
from bot.keyboards.menu_keyboards import (
    get_lesson_start_keyboard, get_lessons_keyboard, get_ai_help_keyboard
)
from ai_agent.agent_graph import learning_agent
from services.sticker_service import sticker_service

logger = logging.getLogger(__name__)


async def handle_lesson_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data
    
    try:
        await query.answer()
        
        if data == "lesson_locked":
            await query.edit_message_text(
                "üîí –≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                reply_markup=query.message.reply_markup
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
        _, topic_id, lesson_id = data.split("_", 2)
        lesson_id = int(lesson_id)
        
        if topic_id not in LEARNING_STRUCTURE:
            await query.edit_message_text(
                "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_lessons_keyboard(topic_id)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
        topic_data = LEARNING_STRUCTURE[topic_id]
        lesson_data = None
        
        for lesson in topic_data["lessons"]:
            if lesson["id"] == lesson_id:
                lesson_data = lesson
                break
        
        if not lesson_data:
            await query.edit_message_text(
                "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_lessons_keyboard(topic_id)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞
        lesson_progress = db_service.get_lesson_progress(user_id, topic_id, lesson_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
        text = MESSAGES["lesson_intro"].format(
            lesson_title=lesson_data["title"],
            lesson_description=lesson_data["description"],
            keywords=", ".join(lesson_data["keywords"])
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if lesson_progress and lesson_progress.attempts > 0:
            if lesson_progress.is_completed:
                text += f"\n‚úÖ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {lesson_progress.best_score:.0f}%"
            else:
                text += f"\nüîÑ –ü–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {lesson_progress.attempts}"
                if lesson_progress.last_attempt_score > 0:
                    text += f" (–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {lesson_progress.best_score:.0f}%)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        current_text = query.message.text if query.message.text else ""
        new_keyboard = get_lesson_start_keyboard(topic_id, lesson_id)
        
        if text != current_text:
            await query.edit_message_text(
                text,
                reply_markup=new_keyboard
            )
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ—Ç –∂–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await query.edit_message_reply_markup(reply_markup=new_keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_lesson_selection: {e}")
        try:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_lessons_keyboard("–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤")
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_lessons_keyboard("–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤")
            )


async def handle_lesson_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é)"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data
    
    try:
        await query.answer()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        _, _, topic_id, lesson_id = data.split("_", 3)
        lesson_id = int(lesson_id)
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞
        lesson_progress = db_service.get_or_create_lesson_progress(user_id, topic_id, lesson_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        from bot.handlers.quiz_handler import start_quiz
        await start_quiz(query, context, topic_id, lesson_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_lesson_start: {e}")
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É—Ä–æ–∫–∞.",
            reply_markup=get_lesson_start_keyboard(topic_id, lesson_id)
        )


async def handle_ask_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏ —É AI"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data
    
    try:
        await query.answer()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parts = data.split("_")
        if len(parts) >= 4:  # ask_ai_topic_lesson
            topic_id = parts[2]
            lesson_id = int(parts[3])
        else:
            topic_id = None
            lesson_id = None
        
        text = "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π:"
        
        await query.edit_message_text(
            text,
            reply_markup=get_ai_help_keyboard(topic_id, lesson_id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ask_ai: {e}")
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É.",
            reply_markup=get_ai_help_keyboard()
        )


async def handle_quick_ai_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data
    
    try:
        await query.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        if data == "quick_explain_basics":
            question = "–û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è —Ä–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞"
        elif data == "quick_examples":
            question = "–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏"
        elif data == "quick_faq":
            question = "–ö–∞–∫–∏–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç—å –ø–æ —Ç–µ–º–µ —Ä–∏—Å–∫–æ–≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?"
        else:
            await query.edit_message_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞.",
                reply_markup=get_ai_help_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await query.edit_message_text(
            "ü§î AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = learning_agent.provide_learning_assistance(
            user_id=user_id,
            question=question
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text = f"ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫:\n\n{response}\n\n"
        text += "üí° –ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
        
        await query.edit_message_text(
            text,
            reply_markup=get_ai_help_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_quick_ai_questions: {e}")
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_ai_help_keyboard()
        )


async def handle_custom_ai_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    
    try:
        await query.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        context.user_data["waiting_for_ai_question"] = True
        
        text = "‚úçÔ∏è –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤:\n\n"
        text += "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–∞—Å—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç."
        
        await query.edit_message_text(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_custom_ai_question: {e}")
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=get_ai_help_keyboard()
        )


async def handle_user_ai_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∫ AI"""
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id
    question = update.message.text
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–æ–ø—Ä–æ—Å
        if not context.user_data.get("waiting_for_ai_question"):
            return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data["waiting_for_ai_question"] = False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await context.bot.send_message(
            chat_id=chat_id,
            text="ü§î AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = learning_agent.provide_learning_assistance(
            user_id=user_id,
            question=question
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        text = f"‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: {question}\n\n"
        text += f"ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫:\n{response}\n\n"
        text += "üí° –ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=get_ai_help_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_ai_question: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_continue_learning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É—Ä–æ–∫–∞"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data
    
    try:
        await query.answer()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        topic_id = data.split("_")[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        progress_summary = db_service.get_user_progress_summary(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–∫ –∏–ª–∏ —Ç–µ–º—É
        current_topic = progress_summary.current_topic
        current_lesson = progress_summary.current_lesson
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —É—Ä–æ–∫–∏ –≤ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
        if current_topic in LEARNING_STRUCTURE:
            total_lessons = len(LEARNING_STRUCTURE[current_topic]["lessons"])
            
            if current_lesson <= total_lessons:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –≤ —Ç–µ–º–µ
                topic_data = LEARNING_STRUCTURE[current_topic]
                text = f"{topic_data['title']}\n\n"
                text += "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
                
                await query.edit_message_text(
                    text,
                    reply_markup=get_lessons_keyboard(current_topic, progress_summary.dict())
                )
            else:
                # –¢–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
                await query.edit_message_text(
                    "üéâ –¢–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                    reply_markup=get_lessons_keyboard(current_topic, progress_summary.dict())
                )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_continue_learning: {e}")
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.",
            reply_markup=get_lessons_keyboard("–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤")
        )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_lesson_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—Ä–æ–∫–æ–≤"""
    
    # –í—ã–±–æ—Ä —É—Ä–æ–∫–∞
    application.add_handler(
        CallbackQueryHandler(
            handle_lesson_selection,
            pattern=r"^lesson_.*"
        ),
        group=2
    )
    
    # –ù–∞—á–∞–ª–æ —É—Ä–æ–∫–∞
    application.add_handler(
        CallbackQueryHandler(
            handle_lesson_start,
            pattern=r"^start_lesson_.*"
        ),
        group=2
    )
    
    # –ü–æ–º–æ—â—å AI
    application.add_handler(
        CallbackQueryHandler(
            handle_ask_ai,
            pattern=r"^ask_ai.*"
        ),
        group=2
    )
    
    # –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã AI
    application.add_handler(
        CallbackQueryHandler(
            handle_quick_ai_questions,
            pattern=r"^quick_.*"
        ),
        group=2
    )
    
    # –ó–∞–ø—Ä–æ—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    application.add_handler(
        CallbackQueryHandler(
            handle_custom_ai_question,
            pattern=r"^ask_custom_question$"
        ),
        group=2
    )
    
    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    application.add_handler(
        CallbackQueryHandler(
            handle_continue_learning,
            pattern=r"^continue_learning_.*"
        ),
        group=2
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI –≤–æ–ø—Ä–æ—Å–æ–≤
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_user_ai_question
        ),
        group=5  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    )