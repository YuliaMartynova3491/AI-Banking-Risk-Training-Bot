# –§–∞–π–ª: bot/handlers/lesson_handler.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤ –∏ –æ–±—É—á–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø 4.0
- –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–ª–∏–∞—Å—ã –¥–ª—è callback_data
- –í—ã–Ω–µ—Å–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è parse_callback_data –≤ —É—Ç–∏–ª–∏—Ç—ã
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
from telegram.error import BadRequest

from core.database import db_service
from config.bot_config import LEARNING_STRUCTURE, MESSAGES, ALIAS_TO_TOPIC # –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç ALIAS_TO_TOPIC
from bot.keyboards.menu_keyboards import get_lesson_start_keyboard, get_lessons_keyboard, get_ai_help_keyboard
from ai_agent.agent_graph import learning_agent
from bot.handlers.quiz_handler import start_quiz
from bot.handlers.menu_handler import show_learning_topics
from bot.utils.helpers import parse_callback_data # –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç –∏–∑ —É—Ç–∏–ª–∏—Ç

logger = logging.getLogger(__name__)


# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ---
async def handle_lesson_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback-–∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Ä–æ–∫–∞–º–∏."""
    query = update.callback_query
    await query.answer()

    logger.info(f"lesson_handler: –ü–æ–ª—É—á–µ–Ω callback: {query.data}")

    data = parse_callback_data(query.data)
    action = data.get("action")
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π topic_id –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∞–ª–∏–∞—Å–∞ `tid`
    topic_id = ALIAS_TO_TOPIC.get(data.get("tid"))
    lesson_id = int(data.get("lesson_id", 0))

    try:
        if action == "lesson":
            await show_lesson_intro(query, context, topic_id, lesson_id)
        elif action == "start_lesson":
            await start_quiz_wrapper(query, context, topic_id, lesson_id)
        elif action == "ask_ai":
            await handle_ask_ai(query, context, topic_id, lesson_id)
        elif action == "quick_question":
            await handle_quick_ai_question(query, context, data.get("type"))
        elif action == "ask_custom_question":
            await handle_custom_ai_question(query, context)
        elif action == "continue_learning":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º topic_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ –Ω—É–∂–Ω–æ–π —Ç–µ–º—ã
            await handle_back_to_lessons(query, context, topic_id)
        elif action == "back_to_lessons":
            await handle_back_to_lessons(query, context, topic_id)
        elif action == "lesson_locked":
             await query.answer("üîí –≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ.", show_alert=True)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è action '{action}' –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –¥–ª—è action '{action}': {e}", exc_info=True)
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_lesson_callback –¥–ª—è action '{action}': {e}", exc_info=True)


# --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---

async def show_lesson_intro(query, context, topic_id: str, lesson_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –∫ —É—Ä–æ–∫—É."""
    if not topic_id or not lesson_id: return
    topic_data = LEARNING_STRUCTURE.get(topic_id)
    if not topic_data: return
    
    lesson_data = next((l for l in topic_data["lessons"] if l["id"] == lesson_id), None)
    if not lesson_data: return
    
    text = MESSAGES["lesson_intro"].format(
        lesson_title=lesson_data["title"],
        lesson_description=lesson_data["description"],
        keywords=", ".join(lesson_data["keywords"])
    )
    reply_markup = get_lesson_start_keyboard(topic_id, lesson_id)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def start_quiz_wrapper(query, context, topic_id: str, lesson_id: int):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞."""
    if not topic_id or not lesson_id: return
    db_service.get_or_create_lesson_progress(str(query.from_user.id), topic_id, lesson_id)
    await start_quiz(query, context, topic_id, lesson_id)

async def handle_ask_ai(query, context, topic_id: str, lesson_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏ —É AI."""
    text = "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!"
    reply_markup = get_ai_help_keyboard(topic_id, lesson_id)
    await query.edit_message_text(text, reply_markup=reply_markup)

async def handle_quick_ai_question(query, context, question_type: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI."""
    question_map = {
        "basics": "–û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è —Ä–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
        "examples": "–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"
    }
    question = question_map.get(question_type)
    if not question: return

    await query.edit_message_text("ü§î AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    response = learning_agent.provide_learning_assistance(user_id=str(query.from_user.id), question=question)
    text = f"ü§ñ *AI-–ø–æ–º–æ—â–Ω–∏–∫:*\n\n{response}\n\nüí° –ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã?"
    await query.edit_message_text(text, reply_markup=get_ai_help_keyboard(), parse_mode='Markdown')

async def handle_custom_ai_question(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    context.user_data["waiting_for_ai_question"] = True
    text = "‚úçÔ∏è –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    await query.edit_message_text(text)

async def handle_user_ai_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∫ AI, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–º."""
    if not context.user_data.get("waiting_for_ai_question"):
        return
    context.user_data["waiting_for_ai_question"] = False
    
    user_id = str(update.effective_user.id)
    question = update.message.text
    
    processing_msg = await update.message.reply_text("ü§î AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    response = learning_agent.provide_learning_assistance(user_id=user_id, question=question)
    await processing_msg.delete()

    text = f"‚ùì *–í–∞—à –≤–æ–ø—Ä–æ—Å:*\n{question}\n\nü§ñ *AI-–ø–æ–º–æ—â–Ω–∏–∫:*\n{response}"
    await update.message.reply_text(text, reply_markup=get_ai_help_keyboard(), parse_mode='Markdown')

async def handle_back_to_lessons(query, context, topic_id: str):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ —Ç–µ–º—ã."""
    if not topic_id:
        await show_learning_topics(query.message.chat_id, context, query.message.message_id)
        return

    progress_summary = db_service.get_user_progress_summary(str(query.from_user.id))
    topic_data = LEARNING_STRUCTURE[topic_id]
    text = f"*{topic_data['title']}*\n_{topic_data['description']}_\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:"
    reply_markup = get_lessons_keyboard(topic_id, progress_summary.dict())
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_lesson_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—Ä–æ–∫–æ–≤."""
    lesson_actions = [
        "lesson", "start_lesson", "ask_ai", "quick_question",
        "ask_custom_question", "continue_learning", "back_to_lessons", "lesson_locked"
    ]
    lesson_callback_pattern = r"^action:(" + "|".join(lesson_actions) + r").*"
    application.add_handler(CallbackQueryHandler(handle_lesson_callback, pattern=lesson_callback_pattern), group=2)

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_ai_question), group=5)