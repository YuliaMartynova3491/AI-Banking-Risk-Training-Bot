"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –∑–Ω–∞–Ω–∏–π
"""
import logging
from typing import List, Dict, Any
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler

from core.database import db_service
from core.models import GeneratedQuestion
from config.bot_config import MESSAGES, LEARNING_STRUCTURE
from config.settings import settings
from bot.keyboards.menu_keyboards import (
    get_quiz_keyboard, get_quiz_result_keyboard, get_lesson_start_keyboard
)
from ai_agent.agent_graph import learning_agent
from services.sticker_service import sticker_service

logger = logging.getLogger(__name__)


async def start_quiz(query, context: ContextTypes.DEFAULT_TYPE, topic_id: str, lesson_id: int):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = str(query.from_user.id)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        await query.edit_message_text(
            "üß† AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∞—Å...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é AI-–∞–≥–µ–Ω—Ç–∞
        questions_data = learning_agent.generate_adaptive_questions(
            user_id=user_id,
            topic=topic_id,
            lesson_id=lesson_id
        )
        
        if not questions_data:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_lesson_start_keyboard(topic_id, lesson_id)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        quiz_session = db_service.create_quiz_session(
            user_id=user_id,
            topic_id=topic_id,
            lesson_id=lesson_id,
            questions=questions_data
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–µ—Å—Å–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["quiz_session_id"] = quiz_session.id
        context.user_data["quiz_correct_count"] = 0
        context.user_data["quiz_consecutive_wrong"] = 0
        context.user_data["quiz_first_correct"] = True
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await show_question(query, context, 0)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=get_lesson_start_keyboard(topic_id, lesson_id)
        )
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = str(query.from_user.id)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        await query.edit_message_text(
            "üß† AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∞—Å...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é AI-–∞–≥–µ–Ω—Ç–∞
        questions_data = learning_agent.generate_adaptive_questions(
            user_id=user_id,
            topic=topic_id,
            lesson_id=lesson_id
        )
        
        if not questions_data:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_lesson_start_keyboard(topic_id, lesson_id)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        quiz_session = db_service.create_quiz_session(
            user_id=user_id,
            topic_id=topic_id,
            lesson_id=lesson_id,
            questions=questions_data
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–µ—Å—Å–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["quiz_session_id"] = quiz_session.id
        context.user_data["quiz_correct_count"] = 0
        context.user_data["quiz_consecutive_wrong"] = 0
        context.user_data["quiz_first_correct"] = True
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await show_question(query, context, 0)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=get_lesson_start_keyboard(topic_id, lesson_id)
        )


async def show_question(query, context: ContextTypes.DEFAULT_TYPE, question_index: int):
    """–ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    session_id = context.user_data.get("quiz_session_id")
    
    if not session_id:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        quiz_session = db_service.get_active_quiz_session(str(query.from_user.id))
        
        if not quiz_session or quiz_session.id != session_id:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        
        questions = quiz_session.questions
        
        if question_index >= len(questions):
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await show_quiz_result(query, context)
            return
        
        current_question = questions[question_index]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Å–µ—Å—Å–∏–∏
        db_service.update_quiz_session(
            session_id=session_id,
            current_question=question_index
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_text = f"‚ùì <b>–í–æ–ø—Ä–æ—Å {question_index + 1} –∏–∑ {len(questions)}</b>\n\n"
        question_text += f"{current_question['question']}"
        
        await query.edit_message_text(
            question_text,
            reply_markup=get_quiz_keyboard(
                question_index + 1,
                len(questions),
                current_question['options']
            ),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞.")


async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    try:
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞
        answer_index = int(query.data.split("_")[1])
        session_id = context.user_data.get("quiz_session_id")
        
        if not session_id:
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        quiz_session = db_service.get_active_quiz_session(user_id)
        
        if not quiz_session or quiz_session.id != session_id:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        
        current_question_index = quiz_session.current_question
        questions = quiz_session.questions
        current_question = questions[current_question_index]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        correct_answer_index = current_question['correct_answer']
        is_correct = answer_index == correct_answer_index
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        current_answers = quiz_session.answers or []
        current_answers.append({
            'question_index': current_question_index,
            'user_answer': answer_index,
            'correct_answer': correct_answer_index,
            'is_correct': is_correct
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        db_service.update_quiz_session(
            session_id=session_id,
            answers=current_answers
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if is_correct:
            context.user_data["quiz_correct_count"] += 1
            context.user_data["quiz_consecutive_wrong"] = 0
        else:
            context.user_data["quiz_consecutive_wrong"] += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
        await show_answer_result(query, context, is_correct, current_question)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.")


async def show_answer_result(query, context: ContextTypes.DEFAULT_TYPE, 
                           is_correct: bool, question_data: Dict[str, Any]):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    user_id = str(query.from_user.id)
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–∫–µ—Ä
        sticker_context = {
            'is_correct': is_correct,
            'is_first_correct': context.user_data.get("quiz_first_correct", True) and is_correct,
            'consecutive_wrong': context.user_data.get("quiz_consecutive_wrong", 0)
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        sticker = sticker_service.get_adaptive_sticker(user_id, sticker_context)
        if sticker:
            await context.bot.send_sticker(
                chat_id=query.message.chat_id,
                sticker=sticker
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if is_correct and context.user_data.get("quiz_first_correct"):
            context.user_data["quiz_first_correct"] = False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if is_correct:
            result_text = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
            encouragement = learning_agent.get_personalized_encouragement(
                user_id=user_id,
                score=100,  # –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                is_improvement=context.user_data.get("quiz_consecutive_wrong", 0) > 0
            )
            result_text += f"üí¨ {encouragement}\n\n"
        else:
            result_text = "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n\n"
            correct_option = question_data['options'][question_data['correct_answer']]
            result_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_option}</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        if 'explanation' in question_data:
            result_text += f"üí° <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>\n{question_data['explanation']}\n\n"
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [[
            InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")
        ]]
        
        await query.edit_message_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")


async def handle_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É"""
    query = update.callback_query
    
    try:
        await query.answer()
        
        session_id = context.user_data.get("quiz_session_id")
        quiz_session = db_service.get_active_quiz_session(str(query.from_user.id))
        
        if not quiz_session or quiz_session.id != session_id:
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        next_question_index = quiz_session.current_question + 1
        
        if next_question_index >= len(quiz_session.questions):
            # –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
            await show_quiz_result(query, context)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            await show_question(query, context, next_question_index)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.")


async def show_quiz_result(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = str(query.from_user.id)
    session_id = context.user_data.get("quiz_session_id")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        quiz_session = db_service.get_active_quiz_session(user_id)
        
        if not quiz_session or quiz_session.id != session_id:
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        correct_count = context.user_data.get("quiz_correct_count", 0)
        total_questions = len(quiz_session.questions)
        score = (correct_count / total_questions) * 100 if total_questions > 0 else 0
        passed = score >= settings.min_score_to_pass
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        db_service.complete_quiz_session(session_id, score)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞
        db_service.update_lesson_progress(
            user_id=user_id,
            topic_id=quiz_session.topic_id,
            lesson_id=quiz_session.lesson_id,
            score=score,
            is_completed=passed
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏–∫–µ—Ä
        sticker_context = {
            'lesson_completed': True,
            'score': score,
            'topic_completed': False  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏–∂–µ
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ç–µ–º–∞
        topic_completed = _check_topic_completion(user_id, quiz_session.topic_id)
        sticker_context['topic_completed'] = topic_completed
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä
        sticker = sticker_service.get_adaptive_sticker(user_id, sticker_context)
        if sticker:
            await context.bot.send_sticker(
                chat_id=query.message.chat_id,
                sticker=sticker
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if passed:
            result_text = MESSAGES["quiz_complete_success"].format(
                score=int(score),
                correct=correct_count,
                total=total_questions
            )
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–æ—â—Ä–µ–Ω–∏–µ
            encouragement = learning_agent.get_personalized_encouragement(
                user_id=user_id,
                score=score,
                is_improvement=True
            )
            result_text += f"\nüí¨ {encouragement}"
            
            # –ï—Å–ª–∏ —Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if topic_completed:
                topic_data = LEARNING_STRUCTURE[quiz_session.topic_id]
                result_text += f"\n\n{MESSAGES['topic_complete'].format(topic_title=topic_data['title'])}"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                _update_user_current_position(user_id, quiz_session.topic_id, quiz_session.lesson_id)
        else:
            result_text = MESSAGES["quiz_complete_failure"].format(
                score=int(score),
                correct=correct_count,
                total=total_questions,
                min_score=settings.min_score_to_pass
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç AI –¥–ª—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            ai_help = learning_agent.provide_learning_assistance(
                user_id=user_id,
                question=f"–ü–æ–º–æ–≥–∏ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ–º–µ {quiz_session.topic_id}, —É—Ä–æ–∫ {quiz_session.lesson_id}",
                topic=quiz_session.topic_id,
                lesson_id=quiz_session.lesson_id
            )
            
            if ai_help and len(ai_help) < 200:  # –ö—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç
                result_text += f"\n\nüí° –°–æ–≤–µ—Ç AI: {ai_help}"
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        _clear_quiz_context(context)
        
        await query.edit_message_text(
            result_text,
            reply_markup=get_quiz_result_keyboard(
                quiz_session.topic_id,
                quiz_session.lesson_id,
                passed
            )
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")


async def handle_retry_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    query = update.callback_query
    data = query.data
    
    try:
        await query.answer()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        _, _, topic_id, lesson_id = data.split("_", 3)
        lesson_id = int(lesson_id)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await start_quiz(query, context, topic_id, lesson_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞.")


async def handle_study_material(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data
    
    try:
        await query.answer()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        _, _, topic_id, lesson_id = data.split("_", 3)
        lesson_id = int(lesson_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç AI
        study_material = learning_agent.provide_learning_assistance(
            user_id=user_id,
            question=f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã {topic_id}, —É—Ä–æ–∫ {lesson_id}",
            topic=topic_id,
            lesson_id=int(lesson_id)
        )
        
        text = f"üìö –£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª\n\n{study_material}\n\n"
        text += "–ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
        
        await query.edit_message_text(
            text,
            reply_markup=get_quiz_result_keyboard(topic_id, int(lesson_id), False)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–±–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–±–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.",
            reply_markup=get_quiz_result_keyboard(topic_id, int(lesson_id), False)
        )


async def handle_quiz_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    try:
        await query.answer("–ü–æ–ª—É—á–∞—é –ø–æ–º–æ—â—å –æ—Ç AI...")
        
        session_id = context.user_data.get("quiz_session_id")
        quiz_session = db_service.get_active_quiz_session(user_id)
        
        if not quiz_session or quiz_session.id != session_id:
            await query.answer("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        current_question_index = quiz_session.current_question
        current_question = quiz_session.questions[current_question_index]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç AI (–±–µ–∑ –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
        hint = learning_agent.provide_learning_assistance(
            user_id=user_id,
            question=f"–î–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {current_question['question']}. –ù–µ –¥–∞–≤–∞–π –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç, —Ç–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.",
            topic=quiz_session.topic_id,
            lesson_id=quiz_session.lesson_id
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ alert
        hint_text = hint[:180] + "..." if len(hint) > 180 else hint
        await query.answer(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_text}", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏", show_alert=True)


async def handle_quiz_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    
    try:
        session_id = context.user_data.get("quiz_session_id")
        quiz_session = db_service.get_active_quiz_session(str(query.from_user.id))
        
        if not quiz_session or quiz_session.id != session_id:
            await query.answer("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        current_question = quiz_session.current_question + 1
        total_questions = len(quiz_session.questions)
        correct_count = context.user_data.get("quiz_correct_count", 0)
        
        progress_text = f"–í–æ–ø—Ä–æ—Å {current_question}/{total_questions}\n"
        progress_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}"
        
        if current_question > 1:
            current_score = (correct_count / (current_question - 1)) * 100
            progress_text += f"\n–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {current_score:.0f}%"
        
        await query.answer(progress_text, show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", show_alert=True)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _check_topic_completion(user_id: str, topic_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–º—ã"""
    try:
        if topic_id not in LEARNING_STRUCTURE:
            return False
        
        total_lessons = len(LEARNING_STRUCTURE[topic_id]["lessons"])
        progress_summary = db_service.get_user_progress_summary(user_id)
        
        if topic_id in progress_summary.topics_progress:
            completed_lessons = progress_summary.topics_progress[topic_id].get("completed_lessons", 0)
            return completed_lessons >= total_lessons
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–º—ã: {e}")
        return False


def _update_user_current_position(user_id: str, completed_topic_id: str, completed_lesson_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
        topic_order = ["–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤", "–∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å_–ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "–æ—Ü–µ–Ω–∫–∞_—Ä–∏—Å–∫–æ–≤"]
        
        if completed_topic_id in LEARNING_STRUCTURE:
            total_lessons_in_topic = len(LEARNING_STRUCTURE[completed_topic_id]["lessons"])
            
            if completed_lesson_id < total_lessons_in_topic:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –≤ —Ç–æ–π –∂–µ —Ç–µ–º–µ
                next_topic = completed_topic_id
                next_lesson = completed_lesson_id + 1
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
                current_topic_index = topic_order.index(completed_topic_id)
                if current_topic_index + 1 < len(topic_order):
                    next_topic = topic_order[current_topic_index + 1]
                    next_lesson = 1
                else:
                    # –í—Å–µ —Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_service.update_user_progress(
                user_id=user_id,
                current_topic=next_topic,
                current_lesson=next_lesson
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


def _clear_quiz_context(context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keys_to_remove = [
        "quiz_session_id",
        "quiz_correct_count", 
        "quiz_consecutive_wrong",
        "quiz_first_correct"
    ]
    
    for key in keys_to_remove:
        context.user_data.pop(key, None)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_quiz_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    application.add_handler(
        CallbackQueryHandler(
            handle_quiz_answer,
            pattern=r"^answer_\d+$"
        ),
        group=3
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    application.add_handler(
        CallbackQueryHandler(
            handle_next_question,
            pattern=r"^next_question$"
        ),
        group=3
    )
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Ä–æ–∫–∞
    application.add_handler(
        CallbackQueryHandler(
            handle_retry_lesson,
            pattern=r"^retry_lesson_.*"
        ),
        group=3
    )
    
    # –ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    application.add_handler(
        CallbackQueryHandler(
            handle_study_material,
            pattern=r"^study_material_.*"
        ),
        group=3
    )
    
    # –ü–æ–º–æ—â—å –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    application.add_handler(
        CallbackQueryHandler(
            handle_quiz_help,
            pattern=r"^quiz_help$"
        ),
        group=3
    )
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    application.add_handler(
        CallbackQueryHandler(
            handle_quiz_progress,
            pattern=r"^quiz_progress$"
        ),
        group=3
    )