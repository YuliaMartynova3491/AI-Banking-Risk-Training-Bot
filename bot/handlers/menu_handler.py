"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, CallbackQueryHandler, filters

from core.database import db_service
from config.bot_config import MENU_BUTTONS, MESSAGES, LEARNING_STRUCTURE
from bot.keyboards.menu_keyboards import (
    get_main_menu_keyboard, get_topics_keyboard, get_lessons_keyboard, 
    get_progress_keyboard, get_confirmation_keyboard
)
from ai_agent.agent_graph import learning_agent

logger = logging.getLogger(__name__)


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    message_text = update.message.text
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id
    
    try:
        if message_text == "üìö –û–±—É—á–µ–Ω–∏–µ":
            await show_learning_menu(update, context)
        
        elif message_text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å":
            await show_progress(update, context)
        
        elif message_text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
            await show_help(update, context)
        
        elif message_text == "üîÑ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞":
            await show_reset_confirmation(update, context)
        
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=get_main_menu_keyboard()
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_menu_buttons: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )


async def show_learning_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è"""
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        progress_summary = db_service.get_user_progress_summary(user_id)
        
        text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–º
        for topic_id, topic_data in LEARNING_STRUCTURE.items():
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–µ
            topic_progress_data = None
            if topic_id in progress_summary.topics_progress:
                topic_progress = progress_summary.topics_progress[topic_id]
                completed = topic_progress.get("completed_lessons", 0)
                total = len(topic_data["lessons"])
                
                if completed > 0:
                    topic_progress_data = f" ({completed}/{total})"
                    if completed == total:
                        topic_progress_data += " ‚úÖ"
            
            text += f"üéØ <b>{topic_data['title']}</b>"
            if topic_progress_data:
                text += topic_progress_data
            text += f"\nüìù {topic_data['description']}\n\n"
        
        text += "üí° <i>–¢–µ–º—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ –º–µ—Ä–µ –∏–∑—É—á–µ–Ω–∏—è.</i>"
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=get_topics_keyboard(progress_summary.dict()),
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_learning_menu: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è.",
            reply_markup=get_main_menu_keyboard()
        )


async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
    user_id = str(update.effective_user.id)
    chat_id = update.effective_chat.id
    
    try:
        progress_summary = db_service.get_user_progress_summary(user_id)
        
        if progress_summary.total_lessons_completed == 0:
            text = MESSAGES["no_progress"]
        else:
            text = MESSAGES["progress_header"]
            text += f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            text += f"‚úÖ –£—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {progress_summary.total_lessons_completed}\n"
            text += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {progress_summary.total_score:.1f}%\n\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º
            for topic_id, topic_data in LEARNING_STRUCTURE.items():
                topic_title = topic_data["title"]
                total_lessons = len(topic_data["lessons"])
                
                if topic_id in progress_summary.topics_progress:
                    topic_progress = progress_summary.topics_progress[topic_id]
                    completed = topic_progress.get("completed_lessons", 0)
                    avg_score = topic_progress.get("average_score", 0)
                    
                    if completed > 0:
                        text += f"{topic_title}\n"
                        text += f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{total_lessons} —É—Ä–æ–∫–æ–≤\n"
                        text += f"   ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.1f}%\n\n"
                else:
                    text += f"{topic_title}\n"
                    text += f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{total_lessons} —É—Ä–æ–∫–æ–≤\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI
            recommendations = learning_agent.adapt_learning_path(user_id)
            if recommendations.get("recommendations"):
                text += "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI:\n"
                for rec in recommendations["recommendations"][:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    text += f"‚Ä¢ {rec}\n"
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=get_progress_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_progress: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.",
            reply_markup=get_main_menu_keyboard()
        )


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"""
    chat_id = update.effective_chat.id
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=MESSAGES["help"],
        reply_markup=get_main_menu_keyboard(),
        parse_mode='HTML'
    )


async def show_reset_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    chat_id = update.effective_chat.id
    
    text = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è?\n\n"
    text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=get_confirmation_keyboard("reset_progress")
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data
    
    try:
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        
        if data == "back_to_menu":
            await back_to_main_menu(query, context)
        
        elif data == "back_to_topics":
            await back_to_topics(query, context)
        
        elif data.startswith("topic_"):
            await handle_topic_selection(query, context)
        
        elif data.startswith("back_to_lessons_"):
            await handle_back_to_lessons(query, context)
        
        elif data.startswith("lesson_"):
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —É—Ä–æ–∫–æ–≤
            from bot.handlers.lesson_handler import handle_lesson_selection
            await handle_lesson_selection(update, context)
            return
        
        elif data.startswith("start_lesson_"):
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞
            from bot.handlers.lesson_handler import handle_lesson_start
            await handle_lesson_start(update, context)
            return
        
        elif data.startswith("ask_ai"):
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É AI
            from bot.handlers.lesson_handler import handle_ask_ai
            await handle_ask_ai(update, context)
            return
        
        elif data.startswith("quick_"):
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –±—ã—Å—Ç—Ä—ã—Ö AI –≤–æ–ø—Ä–æ—Å–æ–≤
            from bot.handlers.lesson_handler import handle_quick_ai_questions
            await handle_quick_ai_questions(update, context)
            return
        
        elif data == "ask_custom_question":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            from bot.handlers.lesson_handler import handle_custom_ai_question
            await handle_custom_ai_question(update, context)
            return
        
        elif data == "lesson_locked":
            await query.answer(
                "üîí –≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                show_alert=True
            )
        
        elif data == "topic_locked":
            await query.answer(
                "üîí –≠—Ç–∞ —Ç–µ–º–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                show_alert=True
            )
        
        elif data == "detailed_stats":
            await show_detailed_statistics(query, context)
        
        elif data == "ai_recommendations":
            await show_ai_recommendations(query, context)
        
        elif data == "confirm_reset":
            await confirm_reset_progress(query, context)
        
        elif data == "cancel_reset":
            await cancel_reset_progress(query, context)
        
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
            await query.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        except Exception:
            pass


async def back_to_main_menu(query, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=welcome_text,
        reply_markup=get_main_menu_keyboard()
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


async def back_to_topics(query, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º"""
    user_id = str(query.from_user.id)
    progress_summary = db_service.get_user_progress_summary(user_id)
    
    text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
    
    await query.edit_message_text(
        text,
        reply_markup=get_topics_keyboard(progress_summary.dict())
    )


async def handle_topic_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    user_id = str(query.from_user.id)
    topic_id = query.data.split("_", 1)[1]
    
    if topic_id not in LEARNING_STRUCTURE:
        await query.edit_message_text(
            "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_topics_keyboard()
        )
        return
    
    progress_summary = db_service.get_user_progress_summary(user_id)
    topic_data = LEARNING_STRUCTURE[topic_id]
    
    text = f"{topic_data['title']}\n\n"
    text += f"üìù {topic_data['description']}\n\n"
    text += "üìö –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
    
    await query.edit_message_text(
        text,
        reply_markup=get_lessons_keyboard(topic_id, progress_summary.dict())
    )


async def handle_back_to_lessons(query, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —É—Ä–æ–∫–∞–º —Ç–µ–º—ã"""
    user_id = str(query.from_user.id)
    topic_id = query.data.split("_")[-1]
    
    progress_summary = db_service.get_user_progress_summary(user_id)
    topic_data = LEARNING_STRUCTURE[topic_id]
    
    text = f"{topic_data['title']}\n\n"
    text += "üìö –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
    
    await query.edit_message_text(
        text,
        reply_markup=get_lessons_keyboard(topic_id, progress_summary.dict())
    )


async def show_detailed_statistics(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = str(query.from_user.id)
    progress_summary = db_service.get_user_progress_summary(user_id)
    
    text = "üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è\n\n"
    
    for topic_id, topic_data in LEARNING_STRUCTURE.items():
        topic_title = topic_data["title"]
        text += f"{topic_title}\n"
        
        if topic_id in progress_summary.topics_progress:
            topic_progress = progress_summary.topics_progress[topic_id]
            lessons_data = topic_progress.get("lessons", {})
            
            for lesson in topic_data["lessons"]:
                lesson_id = str(lesson["id"])
                lesson_title = lesson["title"]
                
                if lesson_id in lessons_data:
                    lesson_data = lessons_data[lesson_id]
                    if lesson_data.get("is_completed"):
                        score = lesson_data.get("best_score", 0)
                        attempts = lesson_data.get("attempts", 0)
                        text += f"  ‚úÖ {lesson_title}: {score:.0f}% ({attempts} –ø–æ–ø—ã—Ç–æ–∫)\n"
                    else:
                        attempts = lesson_data.get("attempts", 0)
                        text += f"  üîÑ {lesson_title}: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ({attempts} –ø–æ–ø—ã—Ç–æ–∫)\n"
                else:
                    text += f"  ‚è≥ {lesson_title}: –Ω–µ –Ω–∞—á–∞—Ç\n"
        else:
            for lesson in topic_data["lessons"]:
                text += f"  ‚è≥ {lesson['title']}: –Ω–µ –Ω–∞—á–∞—Ç\n"
        
        text += "\n"
    
    await query.edit_message_text(
        text,
        reply_markup=get_progress_keyboard()
    )


async def show_ai_recommendations(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI"""
    user_id = str(query.from_user.id)
    
    try:
        recommendations = learning_agent.adapt_learning_path(user_id)
        
        text = "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI\n\n"
        
        if recommendations.get("message"):
            text += f"üí¨ {recommendations['message']}\n\n"
        
        if recommendations.get("recommendations"):
            text += "üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for i, rec in enumerate(recommendations["recommendations"], 1):
                text += f"{i}. {rec}\n"
        else:
            text += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ–º–ø–µ! üéì"
        
        await query.edit_message_text(
            text,
            reply_markup=get_progress_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π AI: {e}")
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_progress_keyboard()
        )


async def confirm_reset_progress(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    user_id = str(query.from_user.id)
    
    try:
        success = db_service.reset_user_progress(user_id)
        
        if success:
            text = "‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.\n\n"
            text += "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await query.edit_message_text(
            text,
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.",
            reply_markup=get_main_menu_keyboard()
        )


async def cancel_reset_progress(query, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    await query.edit_message_text(
        "–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_main_menu_keyboard()
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_menu_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_filter = filters.TEXT & filters.Regex(
        r"^(üìö –û–±—É—á–µ–Ω–∏–µ|üìä –ü—Ä–æ–≥—Ä–µ—Å—Å|‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è|üîÑ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)$"
    )
    application.add_handler(
        MessageHandler(menu_filter, handle_menu_buttons),
        group=1
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(
        CallbackQueryHandler(handle_callback_query),
        group=1
    )