# –§–∞–π–ª: bot/handlers/menu_handler.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø 4.0
- –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–ª–∏–∞—Å—ã –¥–ª—è callback_data
- –í—ã–Ω–µ—Å–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è parse_callback_data –≤ —É—Ç–∏–ª–∏—Ç—ã
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, CallbackQueryHandler, filters
from telegram.error import BadRequest

from core.database import db_service
from config.bot_config import LEARNING_STRUCTURE, MESSAGES, ALIAS_TO_TOPIC # –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç ALIAS_TO_TOPIC
from bot.keyboards.menu_keyboards import (
    get_main_menu_keyboard, get_topics_keyboard, get_lessons_keyboard,
    get_progress_keyboard, get_confirmation_keyboard
)
from ai_agent.agent_graph import learning_agent
from bot.utils.helpers import parse_callback_data # –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç –∏–∑ —É—Ç–∏–ª–∏—Ç

logger = logging.getLogger(__name__)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---

async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    message_text = update.message.text
    if message_text == "üìö –û–±—É—á–µ–Ω–∏–µ":
        await show_learning_topics(update.message.chat_id, context)
    elif message_text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å":
        await show_progress(update, context)
    elif message_text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        await show_help(update, context)
    elif message_text == "üîÑ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞":
        await show_reset_confirmation(update, context)

async def show_learning_topics(chat_id: int, context: ContextTypes.DEFAULT_TYPE, message_id: int = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º."""
    user_id = str(chat_id)
    progress_summary = db_service.get_user_progress_summary(user_id)
    text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
    reply_markup = get_topics_keyboard(progress_summary.dict())
    try:
        if message_id:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=reply_markup)
        else:
            await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ —Å—Ç–∞—Ä–æ–º—É).")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ–º: {e}", exc_info=True)

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    progress_summary = db_service.get_user_progress_summary(user_id)
    text = f"üìä *–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å*\n- –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {progress_summary.total_lessons_completed}\n- –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {progress_summary.total_score:.1f}%\n\n"
    for topic_id, topic_data in LEARNING_STRUCTURE.items():
        topic_progress = progress_summary.topics_progress.get(topic_id, {})
        completed = topic_progress.get("completed_lessons", 0)
        total = len(topic_data["lessons"])
        avg_score = topic_progress.get("average_score", 0)
        status = "‚úÖ" if completed == total else "üîÑ" if completed > 0 else "‚è≥"
        text += f"*{topic_data['title']}*\n{status} –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{total}, –û—Ü–µ–Ω–∫–∞: {avg_score:.1f}%\n\n"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=get_progress_keyboard(), parse_mode='Markdown')

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text=MESSAGES["help"], parse_mode='HTML')

async def show_reset_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=get_confirmation_keyboard("reset_progress"))


# --- –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ---

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    logger.info(f"menu_handler: –ü–æ–ª—É—á–µ–Ω callback: {query.data}")

    data = parse_callback_data(query.data)
    action = data.get("action")
    user_id = str(query.from_user.id)
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π topic_id –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∞–ª–∏–∞—Å–∞ `tid`
    topic_id = ALIAS_TO_TOPIC.get(data.get("tid"))

    try:
        if action == "back_to_menu":
            await query.message.delete()
            await context.bot.send_message(chat_id=user_id, text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())
        elif action == "back_to_topics":
            await show_learning_topics(user_id, context, query.message.message_id)
        elif action == "topic":
            await handle_topic_selection(query, context, topic_id)
        elif action == "topic_locked":
            await query.answer("üîí –≠—Ç–∞ —Ç–µ–º–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ.", show_alert=True)
        elif action == "ai_recommendations":
            await show_ai_recommendations(query, context)
        elif action == "confirm_reset_progress":
            await confirm_reset_progress(query, context)
        elif action == "cancel_reset_progress":
            await query.edit_message_text(text="–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è action '{action}' –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
            await query.answer()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –¥–ª—è action '{action}': {e}", exc_info=True)
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_callback_query –¥–ª—è action '{action}': {e}", exc_info=True)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def handle_topic_selection(query, context, topic_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã -> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–∫–∏."""
    try:
        logger.info(f"[handle_topic_selection] –®–∞–≥ 1: –ù–∞—á–∞–ª–æ. topic_id: {topic_id}")

        if not topic_id or topic_id not in LEARNING_STRUCTURE:
            logger.warning(f"[handle_topic_selection] –®–∞–≥ 1.1: –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π topic_id '{topic_id}'. –í—ã—Ö–æ–¥.")
            return

        progress_summary = db_service.get_user_progress_summary(str(query.from_user.id))
        logger.info(f"[handle_topic_selection] –®–∞–≥ 2: –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω.")

        topic_data = LEARNING_STRUCTURE[topic_id]
        text = f"*{topic_data['title']}*\n_{topic_data['description']}_\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:"
        reply_markup = get_lessons_keyboard(topic_id, progress_summary.dict())
        logger.info(f"[handle_topic_selection] –®–∞–≥ 3: –¢–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—Ä–æ–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.")

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        logger.info(f"[handle_topic_selection] –®–∞–≥ 4: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!")

    except Exception as e:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–π–º–∞–µ—Ç –ª—é–±—É—é –æ—à–∏–±–∫—É –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        logger.error(f"[handle_topic_selection] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)

async def show_ai_recommendations(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI."""
    await query.edit_message_text("‚è≥ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å...")
    recs = learning_agent.adapt_learning_path(str(query.from_user.id))
    text = "üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*\n\n"
    if recs.get("message"): text += f"_{recs['message']}_\n\n"
    if recs.get("recommendations"):
        for rec in recs["recommendations"]: text += f"‚Ä¢ {rec}\n"
    else:
        text += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ–º–ø–µ! üéì"
    await query.edit_message_text(text, reply_markup=get_progress_keyboard(), parse_mode='Markdown')

async def confirm_reset_progress(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    db_service.reset_user_progress(str(query.from_user.id))
    await query.edit_message_text(text="‚úÖ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_menu_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é."""
    menu_buttons_filter = filters.Regex(r"^(üìö –û–±—É—á–µ–Ω–∏–µ|üìä –ü—Ä–æ–≥—Ä–µ—Å—Å|‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è|üîÑ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)$")
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & menu_buttons_filter, handle_menu_buttons), group=1)
    
    menu_actions = [
        "back_to_menu", "back_to_topics", "topic", "topic_locked",
        "ai_recommendations", "confirm_reset_progress", "cancel_reset_progress"
    ]
    menu_callback_pattern = r"^action:(" + "|".join(menu_actions) + r").*"
    application.add_handler(CallbackQueryHandler(handle_callback_query, pattern=menu_callback_pattern), group=1)