# –§–∞–π–ª: bot/handlers/menu_handler.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, MessageHandler, CallbackQueryHandler, filters
from telegram.error import BadRequest

from core.database import db_service
from config.bot_config import LEARNING_STRUCTURE, MESSAGES, ALIAS_TO_TOPIC
from bot.keyboards.menu_keyboards import get_topics_keyboard, get_lessons_keyboard

logger = logging.getLogger(__name__)

def parse_callback_data(data: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç callback data"""
    result = {}
    parts = data.split(';')
    
    for part in parts:
        if ':' in part:
            key, value = part.split(':', 1)
            result[key] = value.strip()
    
    return result

async def handle_learning_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±—É—á–µ–Ω–∏–µ'"""
    if update.message.text != "üìö –û–±—É—á–µ–Ω–∏–µ":
        return
    
    await show_learning_topics(update.message.chat_id, context)

async def show_learning_topics(chat_id: int, context: ContextTypes.DEFAULT_TYPE, message_id: int = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º"""
    user_id = str(chat_id)
    user_progress = db_service.get_user_progress(user_id)
    text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
    reply_markup = get_topics_keyboard(user_progress)
    
    logger.info(f"[show_learning_topics] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        if message_id:
            await context.bot.edit_message_text(
                chat_id=chat_id, 
                message_id=message_id, 
                text=text, 
                reply_markup=reply_markup
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id, 
                text=text, 
                reply_markup=reply_markup
            )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ —Å—Ç–∞—Ä–æ–º—É).")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ–º: {e}")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"menu_handler: –ü–æ–ª—É—á–µ–Ω callback: {query.data}")

    data = parse_callback_data(query.data)
    action = data.get("action")
    user_id = str(query.from_user.id)
    
    topic_id = ALIAS_TO_TOPIC.get(data.get("tid"))

    try:
        if action == "back_to_menu":
            await query.message.delete()
            from bot.keyboards.menu_keyboards import get_main_menu_keyboard
            await context.bot.send_message(
                chat_id=user_id, 
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                reply_markup=get_main_menu_keyboard()
            )
        elif action == "back_to_topics":
            await show_learning_topics(user_id, context, query.message.message_id)
        elif action == "topic":
            await handle_topic_selection(query, context, topic_id)
        elif action == "topic_locked":
            await query.answer("üîí –≠—Ç–∞ —Ç–µ–º–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ.", show_alert=True)
        elif action == "confirm_reset":
            await confirm_reset_progress(query, context)
        elif action == "cancel_reset":
            await query.edit_message_text(text="–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è action '{action}' –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
            await query.answer()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –¥–ª—è action '{action}': {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_callback_query –¥–ª—è action '{action}': {e}")

async def handle_topic_selection(query, context, topic_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã -> –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–∫–∏"""
    try:
        logger.info(f"[handle_topic_selection] –ù–∞—á–∞–ª–æ –¥–ª—è topic_id: {topic_id}")

        if not topic_id or topic_id not in LEARNING_STRUCTURE:
            logger.warning(f"[handle_topic_selection] –ù–µ–≤–µ—Ä–Ω—ã–π topic_id '{topic_id}'")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
        user_progress = db_service.get_user_progress(str(query.from_user.id))
        logger.info(f"[handle_topic_selection] –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å")

        topic_data = LEARNING_STRUCTURE[topic_id]
        text = f"*{topic_data['title']}*\n_{topic_data['description']}_\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:"
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ get_lessons_keyboard
        reply_markup = get_lessons_keyboard(topic_id, user_progress)
        logger.info(f"[handle_topic_selection] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        logger.info(f"[handle_topic_selection] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!")

    except Exception as e:
        logger.error(f"[handle_topic_selection] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)

async def confirm_reset_progress(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    user_id = str(query.from_user.id)
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        user_progress = {
            "topics_progress": {},
            "total_lessons_completed": 0,
            "total_score": 0.0,
            "current_topic": "–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤",
            "current_lesson": 1
        }
        
        db_service.update_user_progress(user_id, user_progress)
        
        logger.info(f"[confirm_reset_progress] –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω")
        
        await query.edit_message_text(text="‚úÖ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–µ–∂–∏–µ —Ç–µ–º—ã
        await show_learning_topics(int(user_id), context, query.message.message_id)
        
    except Exception as e:
        logger.error(f"[confirm_reset_progress] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {user_id}: {e}")
        await query.edit_message_text(text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")

def register_menu_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±—É—á–µ–Ω–∏–µ"
    application.add_handler(MessageHandler(
        filters.Regex(r"^üìö –û–±—É—á–µ–Ω–∏–µ$"), 
        handle_learning_button
    ))
    
    # Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é
    menu_actions = [
        "back_to_menu", "back_to_topics", "topic", "topic_locked",
        "confirm_reset", "cancel_reset"
    ]
    menu_callback_pattern = r"^action:(" + "|".join(menu_actions) + r").*"
    application.add_handler(CallbackQueryHandler(handle_callback_query, pattern=menu_callback_pattern))