"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from utils.monitoring import monitoring
from utils.health_check import health_checker
from services.progress_service import progress_service
from core.database import db_service

logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏)
ADMIN_IDS = [8052999265]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def admin_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        status_report = monitoring.get_status_report()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        health_check = await health_checker.check_all_components()
        
        health_status = f"""
üè• **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:**
‚Ä¢ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {"üü¢" if health_check["overall_status"] == "healthy" else "üü°" if health_check["overall_status"] == "degraded" else "üî¥"} {health_check["overall_status"]}
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {"‚úÖ" if health_check["components"]["database"]["healthy"] else "‚ùå"}
‚Ä¢ AI-–∞–≥–µ–Ω—Ç: {"‚úÖ" if health_check["components"]["ai_agent"]["healthy"] else "‚ùå"}
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {"‚úÖ" if health_check["components"]["config"]["healthy"] else "‚ùå"}"""

        full_report = status_report + health_status
        await update.message.reply_text(full_report, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã admin_status: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def admin_debug_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /debug_user <user_id> - –æ—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /debug_user <user_id>")
            return
        
        user_id = int(context.args[0])
        debug_info = progress_service.debug_user_progress(user_id)
        
        await update.message.reply_text(f"```\n{debug_info}\n```", parse_mode='Markdown')
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã debug_user: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def admin_reset_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reset_user <user_id> - —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset_user <user_id>")
            return
        
        user_id = int(context.args[0])
        success = progress_service.reset_user_progress(user_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã reset_user: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = db_service.get_all_users_stats()  # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ db_service
        
        stats_text = f"""üìä **–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users) if all_users else 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: [–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã]
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ö–æ—Ç—è –±—ã 1 —É—Ä–æ–∫: [–ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è...]

üìö **–û–±—É—á–µ–Ω–∏–µ:**
‚Ä¢ –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {monitoring.stats['lesson_completions']}
‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {monitoring.stats['quiz_attempts']}

ü§ñ **AI-–∞–≥–µ–Ω—Ç:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {monitoring.stats['ai_requests']}
‚Ä¢ –¢–∞–π–º–∞—É—Ç—ã: {monitoring.stats['ai_timeouts']}
‚Ä¢ –û—à–∏–±–∫–∏: {monitoring.stats['errors']}"""
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã admin_stats: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def admin_test_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test_ai - —Ç–µ—Å—Ç AI-–∞–≥–µ–Ω—Ç–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from ai_agent.agent_nodes import AgentNodes
        import time
        
        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é AI-–∞–≥–µ–Ω—Ç–∞...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        start_time = time.time()
        test_state = {
            "user_question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫?",
            "topic": "–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤"
        }
        
        result = AgentNodes.provide_assistance_node(test_state)
        response_time = time.time() - start_time
        
        response = result.get("assistance_response", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        
        test_result = f"""üß™ **–¢–ï–°–¢ AI-–ê–ì–ï–ù–¢–ê**

‚è±Ô∏è **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {response_time:.2f}—Å
üìù **–û—Ç–≤–µ—Ç:** {response[:200]}{'...' if len(response) > 200 else ''}
‚úÖ **–°—Ç–∞—Ç—É—Å:** {"–£—Å–ø–µ—à–Ω–æ" if response and len(response) > 10 else "–û—à–∏–±–∫–∞"}"""
        
        await update.message.reply_text(test_result, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã test_ai: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI: {e}")

async def admin_clear_cache(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /clear_cache - –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        from utils.performance_optimizer import optimizer
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        cache_size_before = len(optimizer.cache)
        optimizer.clear_expired_cache()
        optimizer.cache.clear()  # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        
        await update.message.reply_text(f"üßπ –ö—ç—à –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cache_size_before}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã clear_cache: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")

def register_admin_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler("admin_status", admin_status))
    application.add_handler(CommandHandler("debug_user", admin_debug_user))
    application.add_handler(CommandHandler("reset_user", admin_reset_user))
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    application.add_handler(CommandHandler("test_ai", admin_test_ai))
    application.add_handler(CommandHandler("clear_cache", admin_clear_cache))