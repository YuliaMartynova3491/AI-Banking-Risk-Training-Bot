"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
–ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ AI-–∞–≥–µ–Ω—Ç–∞
"""
import logging
import time
import asyncio
from functools import wraps
from datetime import datetime
from typing import Dict, Any, Optional
from core.database import db_service

logger = logging.getLogger(__name__)

class BotMonitoring:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    
    def __init__(self):
        self.stats = {
            "total_requests": 0,
            "ai_requests": 0,
            "ai_timeouts": 0,
            "errors": 0,
            "lesson_completions": 0,
            "quiz_attempts": 0,
            "start_time": datetime.now()
        }
        self.response_times = []
        self.ai_response_times = []
    
    def track_request(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        self.stats["total_requests"] += 1
    
    def track_ai_request(self, response_time: float, success: bool = True, timeout: bool = False):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ AI-–∑–∞–ø—Ä–æ—Å–∞"""
        self.stats["ai_requests"] += 1
        if timeout:
            self.stats["ai_timeouts"] += 1
        if not success:
            self.stats["errors"] += 1
        if response_time > 0:
            self.ai_response_times.append(response_time)
    
    def track_error(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        self.stats["errors"] += 1
    
    def track_lesson_completion(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
        self.stats["lesson_completions"] += 1
    
    def track_quiz_attempt(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.stats["quiz_attempts"] += 1
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        uptime = datetime.now() - self.stats["start_time"]
        avg_ai_time = sum(self.ai_response_times) / len(self.ai_response_times) if self.ai_response_times else 0
        
        return {
            **self.stats,
            "uptime_minutes": int(uptime.total_seconds() / 60),
            "avg_ai_response_time": round(avg_ai_time, 2),
            "ai_success_rate": round((self.stats["ai_requests"] - self.stats["ai_timeouts"] - self.stats["errors"]) / max(self.stats["ai_requests"], 1) * 100, 1),
            "error_rate": round(self.stats["errors"] / max(self.stats["total_requests"], 1) * 100, 1)
        }
    
    def get_status_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        stats = self.get_stats()
        
        report = f"""üîç **–ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–û–¢–ê**

‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {stats['uptime_minutes']} –º–∏–Ω—É—Ç

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}
‚Ä¢ AI-–∑–∞–ø—Ä–æ—Å–æ–≤: {stats['ai_requests']}
‚Ä¢ –û—à–∏–±–æ–∫: {stats['errors']} ({stats['error_rate']}%)
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {stats['lesson_completions']}
‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {stats['quiz_attempts']}

ü§ñ **AI-–∞–≥–µ–Ω—Ç:**
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['ai_success_rate']}%
‚Ä¢ –¢–∞–π–º–∞—É—Ç—ã: {stats['ai_timeouts']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_ai_response_time']}—Å

{"üü¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ" if stats['error_rate'] < 5 else "üü° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã" if stats['error_rate'] < 15 else "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"}"""
        
        return report

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitoring = BotMonitoring()

def track_performance(operation_name: str = "operation"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            start_time = time.time()
            monitoring.track_request()
            
            try:
                result = await func(*args, **kwargs)
                return result
            except Exception as e:
                monitoring.track_error()
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {operation_name}: {e}")
                raise
            finally:
                end_time = time.time()
                response_time = end_time - start_time
                monitoring.response_times.append(response_time)
                if response_time > 5:  # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                    logger.warning(f"–ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è {operation_name}: {response_time:.2f}—Å")
        
        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            start_time = time.time()
            monitoring.track_request()
            
            try:
                result = func(*args, **kwargs)
                return result
            except Exception as e:
                monitoring.track_error()
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {operation_name}: {e}")
                raise
            finally:
                end_time = time.time()
                response_time = end_time - start_time
                monitoring.response_times.append(response_time)
                if response_time > 3:  # –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                    logger.warning(f"–ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è {operation_name}: {response_time:.2f}—Å")
        
        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper
    return decorator

def track_ai_performance(func):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è AI-–æ–ø–µ—Ä–∞—Ü–∏–π"""
    @wraps(func)
    async def async_wrapper(*args, **kwargs):
        start_time = time.time()
        success = True
        timeout = False
        
        try:
            result = await func(*args, **kwargs)
            return result
        except asyncio.TimeoutError:
            timeout = True
            success = False
            logger.warning("AI-–∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç")
            raise
        except Exception as e:
            success = False
            logger.error(f"–û—à–∏–±–∫–∞ AI-–∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
        finally:
            response_time = time.time() - start_time
            monitoring.track_ai_request(response_time, success, timeout)
    
    @wraps(func) 
    def sync_wrapper(*args, **kwargs):
        start_time = time.time()
        success = True
        timeout = False
        
        try:
            result = func(*args, **kwargs)
            return result
        except Exception as e:
            success = False
            logger.error(f"–û—à–∏–±–∫–∞ AI-–∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
        finally:
            response_time = time.time() - start_time
            monitoring.track_ai_request(response_time, success, timeout)
    
    return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper