"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Ä–æ–∫–æ–≤ –∏ –æ–±—É—á–µ–Ω–∏—è
"""
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Dict, Any, Optional

from core.enums import LessonStatus, TopicStatus
from config.bot_config import LEARNING_STRUCTURE


def get_adaptive_lesson_keyboard(topic_id: str, lesson_id: int, 
                                user_performance: Dict[str, Any] = None,
                                ai_suggestions: List[str] = None) -> InlineKeyboardMarkup:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —É—Ä–æ–∫–∞
    keyboard.append([
        InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —É—Ä–æ–∫", callback_data=f"start_lesson_{topic_id}_{lesson_id}")
    ])
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
    if user_performance:
        avg_score = user_performance.get("average_score", 0)
        attempts = user_performance.get("attempts", 0)
        
        # –ï—Å–ª–∏ –Ω–∏–∑–∫–∞—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–º–æ—â—å
        if avg_score < 70 and attempts > 0:
            keyboard.append([
                InlineKeyboardButton("üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–æ—Ä–∏—é", callback_data=f"review_theory_{topic_id}_{lesson_id}"),
                InlineKeyboardButton("üí° –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏", callback_data=f"get_hints_{topic_id}_{lesson_id}")
            ])
        
        # –ï—Å–ª–∏ –≤—ã—Å–æ–∫–∞—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å–ª–æ–∂–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        elif avg_score >= 90:
            keyboard.append([
                InlineKeyboardButton("‚ö° –°–ª–æ–∂–Ω—ã–π —Ä–µ–∂–∏–º", callback_data=f"hard_mode_{topic_id}_{lesson_id}"),
                InlineKeyboardButton("üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data=f"extra_questions_{topic_id}_{lesson_id}")
            ])
    
    # AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    keyboard.append([
        InlineKeyboardButton("ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫", callback_data=f"ask_ai_{topic_id}_{lesson_id}")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫–∞–º", callback_data=f"back_to_lessons_{topic_id}"),
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_study_material_keyboard(topic_id: str, lesson_id: int, 
                               material_sections: List[Dict[str, str]] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    keyboard = []
    
    # –†–∞–∑–¥–µ–ª—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    if material_sections:
        for i, section in enumerate(material_sections):
            keyboard.append([
                InlineKeyboardButton(
                    f"üìñ {section['title']}", 
                    callback_data=f"study_section_{topic_id}_{lesson_id}_{i}"
                )
            ])
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        keyboard.append([
            InlineKeyboardButton("üìã –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è", callback_data=f"study_concepts_{topic_id}_{lesson_id}"),
            InlineKeyboardButton("üîç –ü—Ä–∏–º–µ—Ä—ã", callback_data=f"study_examples_{topic_id}_{lesson_id}")
        ])
        keyboard.append([
            InlineKeyboardButton("‚öôÔ∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", callback_data=f"study_practice_{topic_id}_{lesson_id}"),
            InlineKeyboardButton("üìä –°—Ö–µ–º—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data=f"study_schemes_{topic_id}_{lesson_id}")
        ])
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    keyboard.append([
        InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"ask_question_{topic_id}_{lesson_id}"),
        InlineKeyboardButton("üîñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"save_note_{topic_id}_{lesson_id}")
    ])
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    keyboard.append([
        InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"ready_for_quiz_{topic_id}_{lesson_id}")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"back_to_lesson_{topic_id}_{lesson_id}"),
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_quiz_settings_keyboard(topic_id: str, lesson_id: int, 
                              available_difficulties: List[str] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = []
    
    # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if available_difficulties:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", callback_data="quiz_settings_header")])
        
        difficulty_buttons = []
        for difficulty in available_difficulties:
            difficulty_names = {
                "beginner": "üü¢ –ë–∞–∑–æ–≤—ã–π",
                "intermediate": "üü° –°—Ä–µ–¥–Ω–∏–π", 
                "advanced": "üî¥ –°–ª–æ–∂–Ω—ã–π"
            }
            button_text = difficulty_names.get(difficulty, difficulty)
            difficulty_buttons.append(
                InlineKeyboardButton(button_text, callback_data=f"set_difficulty_{difficulty}_{topic_id}_{lesson_id}")
            )
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ä—è–¥—ã –ø–æ 2
        for i in range(0, len(difficulty_buttons), 2):
            keyboard.append(difficulty_buttons[i:i+2])
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    keyboard.append([InlineKeyboardButton("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="question_count_header")])
    keyboard.append([
        InlineKeyboardButton("3 –≤–æ–ø—Ä–æ—Å–∞", callback_data=f"set_count_3_{topic_id}_{lesson_id}"),
        InlineKeyboardButton("5 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data=f"set_count_5_{topic_id}_{lesson_id}"),
        InlineKeyboardButton("10 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data=f"set_count_10_{topic_id}_{lesson_id}")
    ])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã", callback_data=f"toggle_hints_{topic_id}_{lesson_id}"),
        InlineKeyboardButton("‚è±Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏", callback_data=f"toggle_timer_{topic_id}_{lesson_id}")
    ])
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"start_configured_quiz_{topic_id}_{lesson_id}")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"back_to_lesson_{topic_id}_{lesson_id}")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_lesson_completion_keyboard(topic_id: str, lesson_id: int, 
                                 next_lesson_available: bool = False,
                                 topic_completed: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    keyboard = []
    
    # –û—Ç–∑—ã–≤ –æ–± —É—Ä–æ–∫–µ
    keyboard.append([
        InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å —É—Ä–æ–∫", callback_data=f"rate_lesson_{topic_id}_{lesson_id}")
    ])
    
    # –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    if topic_completed:
        keyboard.append([
            InlineKeyboardButton("üéâ –ö —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ", callback_data="next_topic"),
            InlineKeyboardButton("üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data=f"get_certificate_{topic_id}")
        ])
    elif next_lesson_available:
        keyboard.append([
            InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"next_lesson_{topic_id}"),
            InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫", callback_data=f"repeat_lesson_{topic_id}_{lesson_id}")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫", callback_data=f"repeat_lesson_{topic_id}_{lesson_id}"),
            InlineKeyboardButton("üìö –ö —É—Ä–æ–∫–∞–º —Ç–µ–º—ã", callback_data=f"back_to_lessons_{topic_id}")
        ])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    keyboard.append([
        InlineKeyboardButton("üìñ –î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"extra_materials_{topic_id}_{lesson_id}"),
        InlineKeyboardButton("ü§ñ –û–±—Å—É–¥–∏—Ç—å —Å AI", callback_data=f"discuss_with_ai_{topic_id}_{lesson_id}")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_ai_interaction_keyboard(context: str, topic_id: str = None, lesson_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É—Ä–æ–∫–∞"""
    keyboard = []
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å AI
    if context == "lesson_help":
        keyboard.append([
            InlineKeyboardButton("üí° –û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏", callback_data=f"ai_explain_simple_{topic_id}_{lesson_id}"),
            InlineKeyboardButton("üîç –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã", callback_data=f"ai_give_examples_{topic_id}_{lesson_id}")
        ])
        keyboard.append([
            InlineKeyboardButton("üéØ –ö–∞–∫ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å?", callback_data=f"ai_practical_use_{topic_id}_{lesson_id}"),
            InlineKeyboardButton("üîó –°–≤—è–∑—å —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ–º–∞–º–∏", callback_data=f"ai_connections_{topic_id}_{lesson_id}")
        ])
    
    elif context == "quiz_help":
        keyboard.append([
            InlineKeyboardButton("üí≠ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –≤–æ–ø—Ä–æ—Å—É", callback_data=f"ai_quiz_hint_{topic_id}_{lesson_id}"),
            InlineKeyboardButton("üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–æ—Ä–∏—é", callback_data=f"ai_review_theory_{topic_id}_{lesson_id}")
        ])
    
    elif context == "general_help":
        keyboard.append([
            InlineKeyboardButton("‚ùì –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="ai_general_help"),
            InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="ai_progress_analysis")
        ])
    
    # –í–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    keyboard.append([
        InlineKeyboardButton("‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data=f"ai_custom_question_{context}")
    ])
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–º–æ—â–∏
    if topic_id and lesson_id:
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"back_to_lesson_{topic_id}_{lesson_id}")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ])
    
    return InlineKeyboardMarkup(keyboard)


def get_learning_tools_keyboard(topic_id: str, lesson_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è"""
    keyboard = []
    
    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("üé¥ –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"flashcards_{topic_id}_{lesson_id}"),
        InlineKeyboardButton("üß© –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ö–µ–º—ã", callback_data=f"interactive_schemes_{topic_id}_{lesson_id}")
    ])
    
    # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    keyboard.append([
        InlineKeyboardButton("üìù –ö–æ–Ω—Å–ø–µ–∫—Ç —É—Ä–æ–∫–∞", callback_data=f"lesson_summary_{topic_id}_{lesson_id}"),
        InlineKeyboardButton("üéØ –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã", callback_data=f"key_points_{topic_id}_{lesson_id}")
    ])
    
    # –°–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∞
    keyboard.append([
        InlineKeyboardButton("‚úÖ –°–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data=f"self_check_{topic_id}_{lesson_id}"),
        InlineKeyboardButton("üîÑ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤—Ç–æ—Ä", callback_data=f"quick_review_{topic_id}_{lesson_id}")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"back_to_lesson_{topic_id}_{lesson_id}")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_progress_visualization_keyboard(user_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    keyboard = []
    
    # –¢–∏–ø—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data=f"progress_chart_{user_id}"),
        InlineKeyboardButton("üéØ –ö–∞—Ä—Ç–∞ –Ω–∞–≤—ã–∫–æ–≤", callback_data=f"skills_map_{user_id}")
    ])
    
    keyboard.append([
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º", callback_data=f"topic_stats_{user_id}"),
        InlineKeyboardButton("‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è", callback_data=f"time_stats_{user_id}")
    ])
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    keyboard.append([
        InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data=f"achievements_{user_id}"),
        InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å –¥—Ä—É–≥–∏–º–∏", callback_data=f"compare_progress_{user_id}")
    ])
    
    # AI-–∞–Ω–∞–ª–∏–∑
    keyboard.append([
        InlineKeyboardButton("ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data=f"ai_progress_analysis_{user_id}")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ö –ø—Ä–æ–≥—Ä–µ—Å—Å—É", callback_data="back_to_progress")
    ])
    
    return InlineKeyboardMarkup(keyboard)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def add_lesson_status_indicators(buttons: List[InlineKeyboardButton], 
                                lesson_status: Dict[int, str]) -> List[InlineKeyboardButton]:
    """–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ –∫ –∫–Ω–æ–ø–∫–∞–º —É—Ä–æ–∫–æ–≤"""
    status_emojis = {
        LessonStatus.COMPLETED.value: "‚úÖ",
        LessonStatus.IN_PROGRESS.value: "üîÑ", 
        LessonStatus.AVAILABLE.value: "üìù",
        LessonStatus.LOCKED.value: "üîí",
        LessonStatus.FAILED.value: "‚ùå"
    }
    
    updated_buttons = []
    for button in buttons:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º lesson_id –∏–∑ callback_data
        if "lesson_" in button.callback_data:
            try:
                lesson_id = int(button.callback_data.split("_")[-1])
                status = lesson_status.get(lesson_id, LessonStatus.AVAILABLE.value)
                emoji = status_emojis.get(status, "üìù")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ —Ç–µ–∫—Å—Ç—É
                new_text = f"{emoji} {button.text}"
                updated_buttons.append(
                    InlineKeyboardButton(new_text, callback_data=button.callback_data)
                )
            except (ValueError, IndexError):
                updated_buttons.append(button)
        else:
            updated_buttons.append(button)
    
    return updated_buttons


def create_adaptive_navigation(current_topic: str, current_lesson: int, 
                             user_progress: Dict[str, Any]) -> List[List[InlineKeyboardButton]]:
    """–°–æ–∑–¥–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    navigation = []
    