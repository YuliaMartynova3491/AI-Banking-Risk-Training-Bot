"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é
"""
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from typing import List, Dict, Any
from config.bot_config import MENU_BUTTONS, LEARNING_STRUCTURE


def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = [
        [KeyboardButton("üìö –û–±—É—á–µ–Ω–∏–µ")],
        [
            KeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"),
            KeyboardButton("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        ],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )


def get_topics_keyboard(user_progress: Dict[str, Any] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º –æ–±—É—á–µ–Ω–∏—è"""
    keyboard = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    available_topics = _get_available_topics(user_progress)
    
    for topic_id, topic_data in LEARNING_STRUCTURE.items():
        title = topic_data["title"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if user_progress and topic_id in user_progress.get("topics_progress", {}):
            topic_progress = user_progress["topics_progress"][topic_id]
            completed_lessons = topic_progress.get("completed_lessons", 0)
            total_lessons = len(topic_data["lessons"])
            
            if completed_lessons == total_lessons:
                title += " ‚úÖ"
            elif completed_lessons > 0:
                title += f" ({completed_lessons}/{total_lessons})"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ–º—ã
        is_available = topic_id in available_topics
        callback_data = f"topic_{topic_id}" if is_available else "topic_locked"
        
        if not is_available:
            title += " üîí"
        
        keyboard.append([
            InlineKeyboardButton(title, callback_data=callback_data)
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_lesson_start_keyboard(topic_id: str, lesson_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞"""
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —É—Ä–æ–∫", callback_data=f"start_lesson_{topic_id}_{lesson_id}")],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI", callback_data=f"ask_ai_{topic_id}_{lesson_id}")],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_lessons_{topic_id}"),
            InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="back_to_menu")
        ]
    ]
    
    return InlineKeyboardMarkup(keyboard)


def get_quiz_keyboard(question_num: int, total_questions: int, options: List[str]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = []
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    for i, option in enumerate(options):
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        button_text = option if len(option) <= 50 else option[:47] + "..."
        keyboard.append([
            InlineKeyboardButton(f"{chr(65+i)}. {button_text}", callback_data=f"answer_{i}")
        ])
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
    progress_text = f"–í–æ–ø—Ä–æ—Å {question_num}/{total_questions}"
    keyboard.append([
        InlineKeyboardButton(f"üìä {progress_text}", callback_data="quiz_progress"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="quiz_help")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_quiz_result_keyboard(topic_id: str, lesson_id: int, passed: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = []
    
    if passed:
        # –ï—Å–ª–∏ —É—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ
        keyboard.append([
            InlineKeyboardButton("üéâ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"continue_learning_{topic_id}")
        ])
    else:
        # –ï—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
        keyboard.append([
            InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫", callback_data=f"retry_lesson_{topic_id}_{lesson_id}"),
            InlineKeyboardButton("üìö –ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=f"study_material_{topic_id}_{lesson_id}")
        ])
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    keyboard.append([
        InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI", callback_data=f"ask_ai_{topic_id}_{lesson_id}")
    ])
    
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫–∞–º", callback_data=f"back_to_lessons_{topic_id}"),
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_progress_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats"),
            InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="ai_recommendations")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    return InlineKeyboardMarkup(keyboard)


def get_ai_help_keyboard(topic_id: str = None, lesson_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–º–æ—â–∏ AI"""
    keyboard = []
    
    # –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    quick_questions = [
        ("üí° –û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è", "quick_explain_basics"),
        ("üìñ –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏", "quick_examples"),
        ("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "quick_faq"),
    ]
    
    for text, callback in quick_questions:
        keyboard.append([InlineKeyboardButton(text, callback_data=callback)])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    keyboard.append([
        InlineKeyboardButton("‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_custom_question")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    if topic_id and lesson_id:
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"back_to_lesson_{topic_id}_{lesson_id}")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ])
    
    return InlineKeyboardMarkup(keyboard)


def get_confirmation_keyboard(action: str, **kwargs) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
    if action == "reset_progress":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
            ]
        ]
    else:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{action}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{action}")
            ]
        ]
    
    return InlineKeyboardMarkup(keyboard)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _get_available_topics(user_progress: Dict[str, Any] = None) -> List[str]:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    if not user_progress:
        return ["–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤"]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    
    available_topics = ["–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤"]
    topics_progress = user_progress.get("topics_progress", {})
    
    # –õ–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ–º
    topic_order = ["–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤", "–∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å_–ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "–æ—Ü–µ–Ω–∫–∞_—Ä–∏—Å–∫–æ–≤"]
    
    for i, topic_id in enumerate(topic_order):
        if i == 0:
            continue  # –ü–µ—Ä–≤–∞—è —Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–µ–º–∞
        prev_topic = topic_order[i - 1]
        if prev_topic in topics_progress:
            prev_topic_data = topics_progress[prev_topic]
            total_lessons = len(LEARNING_STRUCTURE[prev_topic]["lessons"])
            completed_lessons = prev_topic_data.get("completed_lessons", 0)
            
            if completed_lessons >= total_lessons:
                available_topics.append(topic_id)
            else:
                break  # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–µ–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        else:
            break
    
    return available_topics


def _get_available_lessons(topic_id: str, user_progress: Dict[str, Any] = None) -> List[int]:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –≤ —Ç–µ–º–µ"""
    if not user_progress:
        return [1]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
    
    topics_progress = user_progress.get("topics_progress", {})
    
    if topic_id not in topics_progress:
        return [1]  # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞, –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
    
    topic_progress = topics_progress[topic_id]
    lessons_data = topic_progress.get("lessons", {})
    
    available_lessons = [1]  # –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å —É—Ä–æ–∫–æ–≤
    total_lessons = len(LEARNING_STRUCTURE[topic_id]["lessons"])
    
    for lesson_id in range(1, total_lessons + 1):
        if str(lesson_id) in lessons_data:
            lesson_data = lessons_data[str(lesson_id)]
            if lesson_data.get("is_completed", False):
                # –ï—Å–ª–∏ —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º
                next_lesson = lesson_id + 1
                if next_lesson <= total_lessons and next_lesson not in available_lessons:
                    available_lessons.append(next_lesson)
        else:
            break  # –ï—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –Ω–∞—á–∞—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    
    return available_lessons


def _get_lesson_status(topic_id: str, lesson_id: int, user_progress: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Ä–æ–∫–∞"""
    topics_progress = user_progress.get("topics_progress", {})
    
    if topic_id not in topics_progress:
        return {"is_completed": False, "attempts": 0, "best_score": 0}
    
    lessons_data = topics_progress[topic_id].get("lessons", {})
    lesson_key = str(lesson_id)
    
    if lesson_key not in lessons_data:
        return {"is_completed": False, "attempts": 0, "best_score": 0}
    
    return lessons_data[lesson_key]


def get_lessons_keyboard(topic_id: str, user_progress: Dict[str, Any] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–æ–≤ –≤ —Ç–µ–º–µ"""
    keyboard = []
    
    if topic_id not in LEARNING_STRUCTURE:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="back_to_topics")]
        ])
    
    topic_data = LEARNING_STRUCTURE[topic_id]
    available_lessons = _get_available_lessons(topic_id, user_progress)
    
    # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–º—ã {topic_id}: {available_lessons}")
    logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_progress}")
    
    for lesson in topic_data["lessons"]:
        lesson_id = lesson["id"]
        title = f"{lesson_id}. {lesson['title']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞
        if user_progress:
            lesson_progress = _get_lesson_status(topic_id, lesson_id, user_progress)
            if lesson_progress["is_completed"]:
                title += " ‚úÖ"
                score = lesson_progress.get("best_score", 0)
                title += f" ({score:.0f}%)"
            elif lesson_progress["attempts"] > 0:
                title += " üîÑ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞
        is_available = lesson_id in available_lessons
        callback_data = f"start_lesson_{topic_id}_{lesson_id}" if is_available else "lesson_locked"
        
        if not is_available:
            title += " üîí"
        
        keyboard.append([
            InlineKeyboardButton(title, callback_data=callback_data)
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="back_to_topics"),
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    ])
    
    return InlineKeyboardMarkup(keyboard)
