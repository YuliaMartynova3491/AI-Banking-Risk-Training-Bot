"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é 
–û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
1. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞ –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
2. –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
3. –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ–º
"""
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from typing import List, Dict, Any
from config.bot_config import LEARNING_STRUCTURE, TOPIC_ALIASES
import logging

logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è callback_data ---
def create_callback_data(action: str, **kwargs) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ key:value;key2:value2;"""
    parts = [f"action:{action}"]
    for key, value in kwargs.items():
        if value is not None:
            parts.append(f"{key}:{value}")
    return ";".join(parts)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = [
        [KeyboardButton("üìö –û–±—É—á–µ–Ω–∏–µ")],
        [KeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")]
    ]
    return ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_topics_keyboard(user_progress: Dict[str, Any] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º –æ–±—É—á–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    keyboard = []
    available_topics = _get_available_topics(user_progress)
    
    for topic_id, topic_data in LEARNING_STRUCTURE.items():
        title = topic_data["title"]
        if user_progress and topic_id in user_progress.get("topics_progress", {}):
            topic_progress = user_progress["topics_progress"][topic_id]
            completed = topic_progress.get("completed_lessons", 0)
            total = len(topic_data["lessons"])
            if completed == total:
                title += " ‚úÖ"
            elif completed > 0:
                title += f" ({completed}/{total})"

        is_available = topic_id in available_topics
        
        topic_alias = TOPIC_ALIASES.get(topic_id)
        callback_data = create_callback_data("topic", tid=topic_alias) if is_available else "action:topic_locked"

        if not is_available:
            title = f"üîí {title}"
        
        keyboard.append([InlineKeyboardButton(title, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="action:back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_lesson_start_keyboard(topic_id: str, lesson_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞"""
    topic_alias = TOPIC_ALIASES.get(topic_id)
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=create_callback_data("start_lesson", tid=topic_alias, lesson_id=lesson_id))],
        [InlineKeyboardButton("üìñ –ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=create_callback_data("show_material", tid=topic_alias, lesson_id=lesson_id))],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI", callback_data=create_callback_data("ask_ai", tid=topic_alias, lesson_id=lesson_id))],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫–∞–º", callback_data=create_callback_data("back_to_lessons", tid=topic_alias)),
            InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="action:back_to_menu")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_quiz_keyboard(options: List[str]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = []
    for i, option in enumerate(options):
        button_text = option if len(option) <= 60 else option[:57] + "..."
        keyboard.append([InlineKeyboardButton(button_text, callback_data=create_callback_data("answer", index=i))])
    return InlineKeyboardMarkup(keyboard)

def get_quiz_result_keyboard(topic_id: str, lesson_id: int, passed: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    topic_alias = TOPIC_ALIASES.get(topic_id)
    keyboard = []
    if passed:
        keyboard.append([InlineKeyboardButton("üéâ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=create_callback_data("continue_learning", tid=topic_alias))])
    else:
        keyboard.append([InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫", callback_data=create_callback_data("retry_lesson", tid=topic_alias, lesson_id=lesson_id))])
        keyboard.append([InlineKeyboardButton("üìö –ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=create_callback_data("show_material", tid=topic_alias, lesson_id=lesson_id))])
    
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫–∞–º", callback_data=create_callback_data("back_to_lessons", tid=topic_alias)),
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="action:back_to_menu")
    ])
    return InlineKeyboardMarkup(keyboard)

def get_progress_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    keyboard = [
        [InlineKeyboardButton("üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="action:ai_recommendations")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="action:back_to_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_ai_help_keyboard(topic_id: str = None, lesson_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–º–æ—â–∏ AI"""
    keyboard = [
        [InlineKeyboardButton("üí° –û–±—ä—è—Å–Ω–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è", callback_data="action:quick_question;type:basics")],
        [InlineKeyboardButton("üìñ –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data="action:quick_question;type:examples")],
        [InlineKeyboardButton("‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="action:ask_custom_question")],
    ]
    if topic_id and lesson_id:
        topic_alias = TOPIC_ALIASES.get(topic_id)
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ö —É—Ä–æ–∫—É", callback_data=create_callback_data("lesson", tid=topic_alias, lesson_id=lesson_id))])
    else:
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="action:back_to_topics")])
    return InlineKeyboardMarkup(keyboard)

def get_confirmation_keyboard(action_to_confirm: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
    keyboard = [[
        InlineKeyboardButton("‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=create_callback_data(f"confirm_{action_to_confirm}")),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=create_callback_data(f"cancel_{action_to_confirm}"))
    ]]
    return InlineKeyboardMarkup(keyboard)

def get_lessons_keyboard(topic_id: str, user_progress: Dict[str, Any] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–æ–≤ –≤ —Ç–µ–º–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    keyboard = []
    topic_data = LEARNING_STRUCTURE.get(topic_id)
    if not topic_data:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="action:back_to_topics")]])

    available_lessons = _get_available_lessons(topic_id, user_progress)
    
    logger.info(f"[get_lessons_keyboard] topic_id: {topic_id}")
    logger.info(f"[get_lessons_keyboard] available_lessons: {available_lessons}")
    
    topic_alias = TOPIC_ALIASES.get(topic_id)

    for lesson in topic_data["lessons"]:
        lesson_id = lesson["id"]
        title = f"{lesson_id}. {lesson['title']}"
        
        is_available = lesson_id in available_lessons
        
        if user_progress:
            lesson_status = _get_lesson_status(topic_id, lesson_id, user_progress)
            if lesson_status["is_completed"]:
                title = f"‚úÖ {title}"
            elif lesson_status["attempts"] > 0:
                title = f"üîÑ {title}"
        
        callback_data = create_callback_data("lesson", tid=topic_alias, lesson_id=lesson_id) if is_available else "action:lesson_locked"
        if not is_available:
            title = f"üîí {title}"
        
        logger.info(f"[get_lessons_keyboard] –£—Ä–æ–∫ {lesson_id}: –¥–æ—Å—Ç—É–ø–µ–Ω={is_available}, callback={callback_data}")
        
        keyboard.append([InlineKeyboardButton(title, callback_data=callback_data)])

    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="action:back_to_topics"),
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="action:back_to_menu")
    ])
    return InlineKeyboardMarkup(keyboard)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def _get_available_topics(user_progress: Dict[str, Any] = None) -> List[str]:
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ —Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ä–∞–∑—É, –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö"""
    # –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï —Ç–µ–º—ã –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–π
    available_topics = list(LEARNING_STRUCTURE.keys())
    
    logger.info(f"[_get_available_topics] –í—Å–µ —Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã: {available_topics}")
    return available_topics

def _get_available_lessons(topic_id: str, user_progress: Dict[str, Any] = None) -> List[int]:
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–ª—é—á–∞–º–∏ —É—Ä–æ–∫–æ–≤ –∏ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ"""
    logger.info(f"[_get_available_lessons] –ù–∞—á–∞–ª–æ –¥–ª—è —Ç–µ–º—ã {topic_id}")
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –í–°–ï–ì–î–ê –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –õ–Æ–ë–û–ô —Ç–µ–º–µ
    available = [1]
    
    if not user_progress: 
        logger.info(f"[_get_available_lessons] –ù–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - –¥–æ—Å—Ç—É–ø–µ–Ω —É—Ä–æ–∫ 1 –≤ —Ç–µ–º–µ {topic_id}")
        return available
    
    topic_progress = user_progress.get("topics_progress", {}).get(topic_id)
    if not topic_progress: 
        logger.info(f"[_get_available_lessons] –ù–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–µ–º–µ {topic_id} - –¥–æ—Å—Ç—É–ø–µ–Ω —É—Ä–æ–∫ 1")
        return available
    
    lessons_data = topic_progress.get("lessons", {})
    total_lessons = len(LEARNING_STRUCTURE[topic_id]["lessons"])
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º lesson_id –∫–∞–∫ int, –ù–ï –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    for lesson_id in range(1, total_lessons + 1):
        lesson_data = lessons_data.get(lesson_id)  # –£–±—Ä–∞–ª–∏ str()!
        
        if lesson_data and lesson_data.get("is_completed"):
            next_lesson = lesson_id + 1
            if next_lesson <= total_lessons and next_lesson not in available:
                available.append(next_lesson)
                logger.info(f"[_get_available_lessons] ‚úÖ –£—Ä–æ–∫ {next_lesson} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    logger.info(f"[_get_available_lessons] ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ –≤ {topic_id}: {available}")
    return available

def _get_lesson_status(topic_id: str, lesson_id: int, user_progress: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞"""
    default_status = {"is_completed": False, "attempts": 0, "best_score": 0}
    
    try:
        topics_progress = user_progress.get("topics_progress", {})
        topic_progress = topics_progress.get(topic_id, {})
        lessons_progress = topic_progress.get("lessons", {})
        # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º lesson_id –∫–∞–∫ —á–∏—Å–ª–æ, –ù–ï –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        lesson_data = lessons_progress.get(lesson_id)
        
        if lesson_data:
            return {
                "is_completed": lesson_data.get("is_completed", False),
                "attempts": lesson_data.get("attempts", 0),
                "best_score": lesson_data.get("best_score", 0)
            }
        else:
            return default_status
            
    except (KeyError, AttributeError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Ä–æ–∫–∞ {lesson_id} —Ç–µ–º—ã {topic_id}: {e}")
        return default_status