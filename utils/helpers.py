"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è AI-–∞–≥–µ–Ω—Ç–∞
"""
import re
import json
import logging
import random
import os
from typing import List, Dict, Any, Optional, Union, Tuple
from datetime import datetime, timedelta
from pathlib import Path

from core.enums import ScoreRanges, SCORE_DESCRIPTIONS, Constants
from config.bot_config import LEARNING_STRUCTURE

logger = logging.getLogger(__name__)


def format_score(score: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    score_int = int(score)
    
    if score >= ScoreRanges.EXCELLENT_MIN:
        description = SCORE_DESCRIPTIONS[ScoreRanges.EXCELLENT_MIN]
        emoji = "üåü"
    elif score >= ScoreRanges.GOOD_MIN:
        description = SCORE_DESCRIPTIONS[ScoreRanges.GOOD_MIN] 
        emoji = "‚úÖ"
    elif score >= ScoreRanges.SATISFACTORY_MIN:
        description = SCORE_DESCRIPTIONS[ScoreRanges.SATISFACTORY_MIN]
        emoji = "üìö"
    else:
        description = SCORE_DESCRIPTIONS[0]
        emoji = "üìñ"
    
    return f"{emoji} {score_int}% ({description})"


def create_progress_bar(completed: int, total: int, length: int = Constants.PROGRESS_BAR_LENGTH) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    if total == 0:
        return "‚ñ±" * length
    
    filled_length = int(length * completed / total)
    bar = "‚ñ∞" * filled_length + "‚ñ±" * (length - filled_length)
    percentage = (completed / total) * 100
    
    return f"{bar} {percentage:.1f}% ({completed}/{total})"


def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω"
    else:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        if minutes == 0:
            return f"{hours} —á"
        else:
            return f"{hours} —á {minutes} –º–∏–Ω"


def format_datetime(dt: datetime, format_type: str = "full") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if format_type == "full":
        return dt.strftime("%d.%m.%Y %H:%M")
    elif format_type == "date":
        return dt.strftime("%d.%m.%Y")
    elif format_type == "time":
        return dt.strftime("%H:%M")
    elif format_type == "relative":
        return format_relative_time(dt)
    else:
        return dt.isoformat()


def format_relative_time(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞"""
    now = datetime.utcnow()
    diff = now - dt
    
    if diff.days > 0:
        return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
    elif diff.seconds >= 3600:
        hours = diff.seconds // 3600
        return f"{hours} —á –Ω–∞–∑–∞–¥"
    elif diff.seconds >= 60:
        minutes = diff.seconds // 60
        return f"{minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
    else:
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix


def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()
    
    # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    text = re.sub(r'<[^>]+>', '', text)
    
    return text


def validate_callback_data(data: str, expected_parts: int) -> Optional[List[str]]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ä–∞–∑–±–æ—Ä callback_data"""
    if not data:
        return None
    
    parts = data.split('_')
    
    if len(parts) != expected_parts:
        logger.warning(f"Invalid callback data format: {data}, expected {expected_parts} parts")
        return None
    
    return parts


def safe_int_conversion(value: Any, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
    try:
        return int(value)
    except (ValueError, TypeError):
        return default


def safe_float_conversion(value: Any, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        return float(value)
    except (ValueError, TypeError):
        return default


def calculate_percentage(part: Union[int, float], total: Union[int, float]) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
    if total == 0:
        return 0.0
    return (part / total) * 100


def extract_topic_and_lesson(callback_data: str) -> Tuple[Optional[str], Optional[int]]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º—ã –∏ —É—Ä–æ–∫–∞ –∏–∑ callback_data"""
    try:
        parts = callback_data.split('_')
        
        # –ò—â–µ–º —Ç–µ–º—É –∏ —É—Ä–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        topic_id = None
        lesson_id = None
        
        for i, part in enumerate(parts):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Å—Ç—å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ç–µ–º–æ–π
            if part in LEARNING_STRUCTURE:
                topic_id = part
                # –°–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å lesson_id
                if i + 1 < len(parts) and parts[i + 1].isdigit():
                    lesson_id = int(parts[i + 1])
                break
        
        return topic_id, lesson_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º—ã –∏ —É—Ä–æ–∫–∞ –∏–∑ {callback_data}: {e}")
        return None, None


def generate_unique_id(prefix: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
    import uuid
    timestamp = datetime.utcnow().strftime("%Y%m%d%H%M%S")
    unique_part = str(uuid.uuid4())[:8]
    
    if prefix:
        return f"{prefix}_{timestamp}_{unique_part}"
    else:
        return f"{timestamp}_{unique_part}"


def chunk_list(lst: List[Any], chunk_size: int) -> List[List[Any]]:
    """–†–∞–∑–±–∏–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    for i in range(0, len(lst), chunk_size):
        yield lst[i:i + chunk_size]


def flatten_dict(d: Dict[str, Any], parent_key: str = '', sep: str = '.') -> Dict[str, Any]:
    """–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –≤ –ø–ª–æ—Å–∫–∏–π"""
    items = []
    for k, v in d.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, dict):
            items.extend(flatten_dict(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)


def deep_merge_dicts(dict1: Dict[str, Any], dict2: Dict[str, Any]) -> Dict[str, Any]:
    """–ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ä–µ–π"""
    result = dict1.copy()
    
    for key, value in dict2.items():
        if key in result and isinstance(result[key], dict) and isinstance(value, dict):
            result[key] = deep_merge_dicts(result[key], value)
        else:
            result[key] = value
    
    return result


def load_json_file(file_path: Union[str, Path]) -> Optional[Dict[str, Any]]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ JSON –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None


def save_json_file(data: Dict[str, Any], file_path: Union[str, Path]) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        Path(file_path).parent.mkdir(parents=True, exist_ok=True)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False


def get_nested_value(data: Dict[str, Any], key_path: str, default: Any = None) -> Any:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É –∫–ª—é—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'user.profile.name')"""
    keys = key_path.split('.')
    current = data
    
    try:
        for key in keys:
            current = current[key]
        return current
    except (KeyError, TypeError):
        return default


def set_nested_value(data: Dict[str, Any], key_path: str, value: Any) -> Dict[str, Any]:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É –∫–ª—é—á—É"""
    keys = key_path.split('.')
    current = data
    
    for key in keys[:-1]:
        if key not in current or not isinstance(current[key], dict):
            current[key] = {}
        current = current[key]
    
    current[keys[-1]] = value
    return data


def filter_dict_keys(data: Dict[str, Any], allowed_keys: List[str]) -> Dict[str, Any]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –∫–ª—é—á–∞–º"""
    return {k: v for k, v in data.items() if k in allowed_keys}


def remove_dict_keys(data: Dict[str, Any], keys_to_remove: List[str]) -> Dict[str, Any]:
    """–£–¥–∞–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    return {k: v for k, v in data.items() if k not in keys_to_remove}


def format_list_as_text(items: List[str], bullet_point: str = "‚Ä¢", max_items: int = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏"""
    if not items:
        return "–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
    
    if max_items and len(items) > max_items:
        items = items[:max_items]
        items.append(f"... –∏ –µ—â–µ {len(items) - max_items}")
    
    return "\n".join(f"{bullet_point} {item}" for item in items)


def extract_mentions(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    pattern = r'@(\w+)'
    return re.findall(pattern, text)


def extract_hashtags(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    pattern = r'#(\w+)'
    return re.findall(pattern, text)


def normalize_phone_number(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = re.sub(r'\D', '', phone)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if len(digits) == 10:  # –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
        digits = '7' + digits
    elif len(digits) == 11 and digits.startswith('8'):
        digits = '7' + digits[1:]
    
    return digits


def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))


def generate_random_string(length: int = 8, include_numbers: bool = True) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import random
    import string
    
    chars = string.ascii_letters
    if include_numbers:
        chars += string.digits
    
    return ''.join(random.choice(chars) for _ in range(length))


def mask_sensitive_data(text: str, mask_char: str = "*") -> str:
    """–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ"""
    # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
    text = re.sub(r'\b\d{1,3}[-.\s]?\d{3}[-.\s]?\d{3}[-.\s]?\d{2}[-.\s]?\d{2}\b', 
                  lambda m: mask_char * len(m.group()), text)
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º email
    text = re.sub(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',
                  lambda m: mask_char * len(m.group()), text)
    
    return text


def calculate_text_similarity(text1: str, text2: str) -> float:
    """–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤ (–ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é —Å–ª–æ–≤)"""
    words1 = set(text1.lower().split())
    words2 = set(text2.lower().split())
    
    intersection = words1.intersection(words2)
    union = words1.union(words2)
    
    if not union:
        return 0.0
    
    return len(intersection) / len(union)


def format_currency(amount: float, currency: str = "‚ÇΩ") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –≤ –≤–∞–ª—é—Ç–µ"""
    return f"{amount:,.2f} {currency}".replace(",", " ")


def is_business_hours(dt: datetime = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—á–∏–º"""
    if dt is None:
        dt = datetime.now()
    
    # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞, 9:00-18:00
    weekday = dt.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    hour = dt.hour
    
    return weekday < 5 and 9 <= hour < 18


def get_week_boundaries(dt: datetime = None) -> Tuple[datetime, datetime]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"""
    if dt is None:
        dt = datetime.now()
    
    # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    monday = dt - timedelta(days=dt.weekday())
    monday = monday.replace(hour=0, minute=0, second=0, microsecond=0)
    
    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    sunday = monday + timedelta(days=6, hours=23, minutes=59, seconds=59)
    
    return monday, sunday


def batch_process(items: List[Any], batch_size: int, processor_func, *args, **kwargs) -> List[Any]:
    """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞"""
    results = []
    
    for i in range(0, len(items), batch_size):
        batch = items[i:i + batch_size]
        try:
            batch_result = processor_func(batch, *args, **kwargs)
            if isinstance(batch_result, list):
                results.extend(batch_result)
            else:
                results.append(batch_result)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1}: {e}")
            continue
    
    return results


def retry_on_failure(max_attempts: int = 3, delay: float = 1.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            for attempt in range(max_attempts):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if attempt == max_attempts - 1:
                        raise e
                    
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞ –≤ {func.__name__}: {e}")
                    import time
                    time.sleep(delay * (attempt + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            
        return wrapper
    return decorator


def memoize(func):
    """–ü—Ä–æ—Å—Ç–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–∏–∑–∞—Ü–∏–∏"""
    cache = {}
    
    def wrapper(*args, **kwargs):
        key = str(args) + str(sorted(kwargs.items()))
        
        if key in cache:
            return cache[key]
        
        result = func(*args, **kwargs)
        cache[key] = result
        return result
    
    return wrapper


def encode_base64(text: str) -> str:
    """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ base64"""
    import base64
    return base64.b64encode(text.encode('utf-8')).decode('utf-8')


def decode_base64(encoded_text: str) -> str:
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ base64"""
    import base64
    try:
        return base64.b64decode(encoded_text.encode('utf-8')).decode('utf-8')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {e}")
        return ""


def generate_hash(text: str, algorithm: str = 'sha256') -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –æ—Ç —Ç–µ–∫—Å—Ç–∞"""
    import hashlib
    
    hash_obj = getattr(hashlib, algorithm)()
    hash_obj.update(text.encode('utf-8'))
    return hash_obj.hexdigest()


def is_valid_json(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º JSON"""
    try:
        json.loads(text)
        return True
    except json.JSONDecodeError:
        return False


def extract_numbers(text: str) -> List[float]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∏—Å–µ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    pattern = r'-?\d+(?:\.\d+)?'
    matches = re.findall(pattern, text)
    return [float(match) for match in matches]


def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB", "TB"]
    import math
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    
    return f"{s} {size_names[i]}"


def get_file_extension(filename: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    return Path(filename).suffix.lower()


def is_image_file(filename: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.svg'}
    return get_file_extension(filename) in image_extensions


def create_temporary_file(content: str, suffix: str = '.txt') -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    import tempfile
    
    with tempfile.NamedTemporaryFile(mode='w', suffix=suffix, delete=False, encoding='utf-8') as f:
        f.write(content)
        return f.name


def delete_file_safely(file_path: Union[str, Path]) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    try:
        Path(file_path).unlink(missing_ok=True)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False


def ensure_directory_exists(directory: Union[str, Path]) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        Path(directory).mkdir(parents=True, exist_ok=True)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: {e}")
        return False


def get_learning_statistics_summary(user_stats: Dict[str, Any]) -> Dict[str, str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    summary = {}
    
    # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    overall_completion = user_stats.get('overall_completion', 0)
    summary['completion'] = f"{overall_completion:.1f}%"
    
    # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
    avg_score = user_stats.get('average_score', 0)
    summary['average_score'] = format_score(avg_score)
    
    # –£—Ä–æ–∫–∏
    completed_lessons = user_stats.get('total_lessons_completed', 0)
    total_lessons = user_stats.get('total_lessons_available', 0)
    summary['lessons'] = f"{completed_lessons}/{total_lessons}"
    
    # –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞
    weak_topics = user_stats.get('weak_topics', [])
    if weak_topics:
        topic_names = []
        for topic_id in weak_topics:
            if topic_id in LEARNING_STRUCTURE:
                topic_names.append(LEARNING_STRUCTURE[topic_id]['title'])
        summary['weak_areas'] = ', '.join(topic_names[:2])  # –ü–µ—Ä–≤—ã–µ 2
    else:
        summary['weak_areas'] = '–ù–µ—Ç'
    
    # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    strong_topics = user_stats.get('strong_topics', [])
    if strong_topics:
        topic_names = []
        for topic_id in strong_topics:
            if topic_id in LEARNING_STRUCTURE:
                topic_names.append(LEARNING_STRUCTURE[topic_id]['title'])
        summary['strong_areas'] = ', '.join(topic_names[:2])  # –ü–µ—Ä–≤—ã–µ 2
    else:
        summary['strong_areas'] = '–†–∞–∑–≤–∏–≤–∞—é—Ç—Å—è'
    
    return summary


def format_topic_progress(topic_stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–µ–º–µ"""
    completed = topic_stats.get('completed_lessons', 0)
    total = topic_stats.get('total_lessons', 0)
    avg_score = topic_stats.get('average_score', 0)
    
    progress_bar = create_progress_bar(completed, total, 10)
    score_text = format_score(avg_score) if avg_score > 0 else "–ù–µ –Ω–∞—á–∞—Ç–æ"
    
    return f"{progress_bar}\n{score_text}"


def get_next_available_lesson(user_progress: Dict[str, Any]) -> Tuple[Optional[str], Optional[int]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—Ä–æ–∫–∞"""
    current_topic = user_progress.get('current_topic')
    current_lesson = user_progress.get('current_lesson', 1)
    
    if not current_topic or current_topic not in LEARNING_STRUCTURE:
        return "–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤", 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
    topic_data = LEARNING_STRUCTURE[current_topic]
    total_lessons = len(topic_data['lessons'])
    
    if current_lesson < total_lessons:
        return current_topic, current_lesson
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
    topic_order = ["–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤", "–∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å_–ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "–æ—Ü–µ–Ω–∫–∞_—Ä–∏—Å–∫–æ–≤"]
    try:
        current_index = topic_order.index(current_topic)
        if current_index + 1 < len(topic_order):
            return topic_order[current_index + 1], 1
    except ValueError:
        pass
    
    return None, None  # –í—Å–µ —É—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã


def calculate_study_time_estimate(lessons_remaining: int, user_performance: Dict[str, Any] = None) -> str:
    """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—Ä–æ–∫–æ–≤"""
    if lessons_remaining <= 0:
        return "–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    
    # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ —É—Ä–æ–∫: 15 –º–∏–Ω—É—Ç
    base_time_per_lesson = 15
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_performance:
        avg_score = user_performance.get('average_score', 70)
        if avg_score >= 85:
            # –ë—ã—Å—Ç—Ä—ã–µ —É—á–µ–Ω–∏–∫–∏
            base_time_per_lesson = 12
        elif avg_score < 60:
            # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏
            base_time_per_lesson = 20
    
    total_minutes = lessons_remaining * base_time_per_lesson
    return format_duration(total_minutes * 60)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã


def get_encouragement_message(context: str, score: float = None) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–æ—â—Ä–µ–Ω–∏—è"""
    encouragements = {
        'lesson_start': [
            "–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏! üåü",
            "–í–ø–µ—Ä–µ–¥ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º! üìö",
            "–£ –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üí™"
        ],
        'lesson_complete': [
            "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ‚ú®",
            "–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ", 
            "–í—ã –º–æ–ª–æ–¥–µ—Ü! üëè"
        ],
        'lesson_failed': [
            "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ó",
            "–ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ - —ç—Ç–æ –æ–ø—ã—Ç! üìñ",
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å, —É—Å–ø–µ—Ö –ø—Ä–∏–¥–µ—Ç! üåà"
        ],
        'quiz_correct': [
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéØ",
            "–û—Ç–ª–∏—á–Ω–æ! ‚úÖ",
            "–ò–º–µ–Ω–Ω–æ —Ç–∞–∫! üëç"
        ],
        'quiz_wrong': [
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§î",
            "–ë–ª–∏–∑–∫–æ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É! üìù",
            "–ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ üìö"
        ]
    }
    
    messages = encouragements.get(context, ["–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!"])
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
    if score is not None and context in ['lesson_complete', 'quiz_correct']:
        if score >= 90:
            return random.choice([
                "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üåü",
                "–í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç! üèÜ",
                "–ë–ª–µ—Å—Ç—è—â–∞—è —Ä–∞–±–æ—Ç–∞! ‚ú®"
            ])
        elif score >= 80:
            return random.choice(messages)
        else:
            return random.choice([
                "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å üìà",
                "–ù–µ–ø–ª–æ—Ö–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å üìö"
            ])
    
    import random
    return random.choice(messages)


def sanitize_filename(filename: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    
    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    filename = re.sub(r'_+', '_', filename)
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω—É
    max_length = 255
    if len(filename) > max_length:
        name, ext = os.path.splitext(filename)
        filename = name[:max_length - len(ext)] + ext
    
    return filename.strip('_')


def create_backup_filename(original_path: Union[str, Path]) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    path = Path(original_path)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    return f"{path.stem}_backup_{timestamp}{path.suffix}"


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–º–æ–¥–∑–∏
class Emojis:
    SUCCESS = "‚úÖ"
    ERROR = "‚ùå"
    WARNING = "‚ö†Ô∏è"
    INFO = "‚ÑπÔ∏è"
    LOADING = "‚è≥"
    FIRE = "üî•"
    STAR = "‚≠ê"
    TROPHY = "üèÜ"
    BOOKS = "üìö"
    BRAIN = "üß†"
    TARGET = "üéØ"
    ROCKET = "üöÄ"
    HEART = "‚ù§Ô∏è"
    THUMBS_UP = "üëç"
    CLAP = "üëè"
    THINKING = "ü§î"
    LIGHTBULB = "üí°"
    CHART = "üìä"
    CALENDAR = "üìÖ"
    CLOCK = "üïê"