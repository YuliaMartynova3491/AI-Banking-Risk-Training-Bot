"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import logging
import random
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime

from core.database import db_service
from core.models import GeneratedQuestion, QuestionData
from core.enums import QuestionType, LearningDifficulty
from services.rag_service import rag_service
from config.settings import settings

logger = logging.getLogger(__name__)


class QuestionService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        self.rag_service = rag_service
        self.db_service = db_service
    
    def prepare_quiz_questions(self, user_id: str, topic_id: str, lesson_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            user_progress = self.db_service.get_user_progress_summary(user_id)
            user_performance = self._analyze_user_performance(user_progress, topic_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é RAG
            generated_questions = self.rag_service.get_adaptive_questions(
                user_id=user_id,
                topic=topic_id,
                lesson_id=lesson_id,
                user_performance=user_performance
            )
            
            if not generated_questions:
                # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                logger.warning(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {user_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ")
                generated_questions = self._get_fallback_questions(topic_id, lesson_id)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
            questions_data = []
            for question in generated_questions:
                questions_data.append({
                    "question": question.question,
                    "options": question.options,
                    "correct_answer": question.correct_answer,
                    "explanation": question.explanation,
                    "difficulty": question.difficulty,
                    "confidence_score": getattr(question, 'confidence_score', 0.8)
                })
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            random.shuffle(questions_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            max_questions = settings.questions_per_lesson
            questions_data = questions_data[:max_questions]
            
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(questions_data)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return questions_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return self._get_emergency_questions()
    
    def validate_answer(self, question_data: Dict[str, Any], user_answer: int) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            correct_answer = question_data.get("correct_answer", 0)
            is_correct = user_answer == correct_answer
            
            result = {
                "is_correct": is_correct,
                "correct_answer_index": correct_answer,
                "correct_answer_text": question_data.get("options", [])[correct_answer] if correct_answer < len(question_data.get("options", [])) else "",
                "user_answer_text": question_data.get("options", [])[user_answer] if user_answer < len(question_data.get("options", [])) else "",
                "explanation": question_data.get("explanation", ""),
                "question_difficulty": question_data.get("difficulty", "intermediate")
            }
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                "is_correct": False,
                "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞"
            }
    
    def calculate_quiz_score(self, answers: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∑–∞ —Ç–µ—Å—Ç"""
        try:
            if not answers:
                return {"score": 0, "details": "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤"}
            
            total_questions = len(answers)
            correct_answers = sum(1 for answer in answers if answer.get("is_correct", False))
            score_percentage = (correct_answers / total_questions) * 100
            
            # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            difficulty_breakdown = {
                "beginner": {"total": 0, "correct": 0},
                "intermediate": {"total": 0, "correct": 0},
                "advanced": {"total": 0, "correct": 0}
            }
            
            for answer in answers:
                difficulty = answer.get("question_difficulty", "intermediate")
                if difficulty in difficulty_breakdown:
                    difficulty_breakdown[difficulty]["total"] += 1
                    if answer.get("is_correct", False):
                        difficulty_breakdown[difficulty]["correct"] += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self._generate_score_recommendations(
                score_percentage, difficulty_breakdown
            )
            
            return {
                "score": score_percentage,
                "correct_answers": correct_answers,
                "total_questions": total_questions,
                "passed": score_percentage >= settings.min_score_to_pass,
                "difficulty_breakdown": difficulty_breakdown,
                "recommendations": recommendations,
                "performance_level": self._get_performance_level(score_percentage)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            return {"score": 0, "error": str(e)}
    
    def get_question_statistics(self, user_id: str, topic_id: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_progress = self.db_service.get_user_progress_summary(user_id)
            
            stats = {
                "total_questions_answered": 0,
                "correct_answers": 0,
                "accuracy_rate": 0,
                "difficulty_performance": {
                    "beginner": {"answered": 0, "correct": 0, "accuracy": 0},
                    "intermediate": {"answered": 0, "correct": 0, "accuracy": 0},
                    "advanced": {"answered": 0, "correct": 0, "accuracy": 0}
                },
                "topic_performance": {},
                "improvement_trend": []
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º
            lessons_progress = self.db_service.get_user_lessons_progress(user_id)
            
            total_answered = 0
            total_correct = 0
            
            for lesson in lessons_progress:
                if lesson.last_questions and lesson.last_answers:
                    lesson_questions = len(lesson.last_questions)
                    lesson_correct = sum(1 for answer in lesson.last_answers if answer.get("is_correct", False))
                    
                    total_answered += lesson_questions
                    total_correct += lesson_correct
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
                    if lesson.topic_id not in stats["topic_performance"]:
                        stats["topic_performance"][lesson.topic_id] = {
                            "answered": 0, "correct": 0, "accuracy": 0
                        }
                    
                    stats["topic_performance"][lesson.topic_id]["answered"] += lesson_questions
                    stats["topic_performance"][lesson.topic_id]["correct"] += lesson_correct
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
            stats["total_questions_answered"] = total_answered
            stats["correct_answers"] = total_correct
            stats["accuracy_rate"] = (total_correct / total_answered * 100) if total_answered > 0 else 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ç–µ–º–∞–º
            for topic_stats in stats["topic_performance"].values():
                if topic_stats["answered"] > 0:
                    topic_stats["accuracy"] = (topic_stats["correct"] / topic_stats["answered"]) * 100
            
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return {"error": str(e)}
    
    def get_personalized_feedback(self, user_id: str, quiz_result: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"""
        try:
            score = quiz_result.get("score", 0)
            difficulty_breakdown = quiz_result.get("difficulty_breakdown", {})
            
            feedback = []
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            if score >= 90:
                feedback.append("üåü –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–µ.")
            elif score >= 80:
                feedback.append("‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã —É—Å–≤–æ–∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.")
            elif score >= 60:
                feedback.append("üìö –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å.")
            else:
                feedback.append("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            weak_areas = []
            strong_areas = []
            
            for difficulty, stats in difficulty_breakdown.items():
                if stats["total"] > 0:
                    accuracy = (stats["correct"] / stats["total"]) * 100
                    if accuracy < 60:
                        weak_areas.append(difficulty)
                    elif accuracy >= 90:
                        strong_areas.append(difficulty)
            
            if weak_areas:
                difficulty_names = {
                    "beginner": "–±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                    "intermediate": "–≤–æ–ø—Ä–æ—Å—ã —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è",
                    "advanced": "—Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
                }
                weak_names = [difficulty_names.get(area, area) for area in weak_areas]
                feedback.append(f"üí° –°—Ç–æ–∏—Ç —É–¥–µ–ª–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ: {', '.join(weak_names)}")
            
            if strong_areas:
                feedback.append("üéØ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç–º–µ—á–µ–Ω—ã!")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = quiz_result.get("recommendations", [])
            if recommendations:
                feedback.extend(recommendations)
            
            return "\n".join(feedback)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!"
    
    def suggest_review_topics(self, user_id: str) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        try:
            user_progress = self.db_service.get_user_progress_summary(user_id)
            suggestions = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞
            for topic_id, topic_progress in user_progress.topics_progress.items():
                avg_score = topic_progress.get("average_score", 0)
                if avg_score > 0 and avg_score < 75:  # –ï—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏, –Ω–æ –Ω–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞
                    suggestions.append(topic_id)
            
            return suggestions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {e}")
            return []
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _analyze_user_performance(self, user_progress, topic_id: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        performance = {
            "average_score": 70,
            "recent_attempts": 0,
            "weak_areas": [],
            "preferred_difficulty": "intermediate"
        }
        
        if topic_id in user_progress.topics_progress:
            topic_progress = user_progress.topics_progress[topic_id]
            performance["average_score"] = topic_progress.get("average_score", 70)
            performance["recent_attempts"] = min(topic_progress.get("total_attempts", 0), 5)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            if performance["average_score"] >= 90:
                performance["preferred_difficulty"] = "advanced"
            elif performance["average_score"] < 60:
                performance["preferred_difficulty"] = "beginner"
        
        return performance
    
    def _get_fallback_questions(self, topic_id: str, lesson_id: int) -> List[GeneratedQuestion]:
        """–ë–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"""
        fallback_questions = {
            "–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤": {
                1: [
                    GeneratedQuestion(
                        question="–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ª—å—é –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
                        options=[
                            "–í—ã—è–≤–ª–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏",
                            "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –±–∞–Ω–∫–∞",
                            "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
                            "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏"
                        ],
                        correct_answer=0,
                        explanation="–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å - –≤—ã—è–≤–ª–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ü–µ–Ω–∫–∞ —É–≥—Ä–æ–∑, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –±–∞–Ω–∫–∞.",
                        source_context="–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è",
                        difficulty="beginner",
                        confidence_score=0.9
                    ),
                    GeneratedQuestion(
                        question="–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏?",
                        options=[
                            "–í–ª–∞–¥–µ–ª—å—Ü—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                            "–£–û–† (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤)",
                            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
                            "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –±–∞–Ω–∫–∞"
                        ],
                        correct_answer=1,
                        explanation="–£–û–† –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
                        source_context="–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è",
                        difficulty="beginner",
                        confidence_score=0.9
                    ),
                    GeneratedQuestion(
                        question="–ö–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞?",
                        options=[
                            "–¢–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∞",
                            "–¢–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                            "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                            "–¢–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –°–ú–ò"
                        ],
                        correct_answer=2,
                        explanation="–î–ª—è –æ—Ü–µ–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∞, —Ç–∞–∫ –∏ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                        source_context="–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è",
                        difficulty="intermediate",
                        confidence_score=0.9
                    )
                ]
            }
        }
        
        questions = fallback_questions.get(topic_id, {}).get(lesson_id, [])
        return questions
    
    def _get_emergency_questions(self) -> List[Dict[str, Any]]:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—è"""
        return [
            {
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
                "options": [
                    "–†–∏—Å–∫, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏",
                    "–†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–∏–±—ã–ª–∏",
                    "–†–∏—Å–∫ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                    "–†–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
                ],
                "correct_answer": 0,
                "explanation": "–†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∞–Ω —Å —É–≥—Ä–æ–∑–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –±–∞–Ω–∫–∞.",
                "difficulty": "beginner",
                "confidence_score": 1.0
            }
        ]
    
    def _generate_score_recommendations(self, score: float, difficulty_breakdown: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏"""
        recommendations = []
        
        if score < 60:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª")
            recommendations.append("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ AI-–ø–æ–º–æ—â–Ω–∏–∫—É")
        elif score < 80:
            recommendations.append("–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ó–∞–∫—Ä–µ–ø–∏—Ç–µ –∑–Ω–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π")
        else:
            recommendations.append("–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        for difficulty, stats in difficulty_breakdown.items():
            if stats["total"] > 0:
                accuracy = (stats["correct"] / stats["total"]) * 100
                if accuracy < 50:
                    if difficulty == "beginner":
                        recommendations.append("–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏")
                    elif difficulty == "intermediate":
                        recommendations.append("–ü–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤")
                    elif difficulty == "advanced":
                        recommendations.append("–£–≥–ª—É–±–∏—Ç–µ –∑–Ω–∞–Ω–∏—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö")
        
        return recommendations
    
    def _get_performance_level(self, score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏"""
        if score >= 90:
            return "excellent"
        elif score >= 80:
            return "good"
        elif score >= 60:
            return "satisfactory"
        else:
            return "poor"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
question_service = QuestionService()