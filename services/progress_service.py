"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –æ–±—É—á–µ–Ω–∏—è
"""
import logging
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta

from core.database import db_service
from core.enums import TopicStatus, LessonStatus, ScoreRanges, TOPIC_ORDER
from config.bot_config import LEARNING_STRUCTURE

logger = logging.getLogger(__name__)


class ProgressService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self):
        self.db_service = db_service
    
    def get_user_learning_path(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            progress = self.db_service.get_user_progress_summary(user_id)
            
            learning_path = {
                "current_position": {
                    "topic": progress.current_topic,
                    "lesson": progress.current_lesson
                },
                "available_topics": self._get_available_topics(progress),
                "available_lessons": {},
                "recommendations": self._generate_learning_recommendations(progress)
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ–º—ã
            for topic_id in learning_path["available_topics"]:
                learning_path["available_lessons"][topic_id] = self._get_available_lessons(
                    topic_id, progress
                )
            
            return learning_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")
            return self._get_default_learning_path()
    
    def calculate_topic_progress(self, user_id: str, topic_id: str) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–µ"""
        try:
            if topic_id not in LEARNING_STRUCTURE:
                return {"error": "Topic not found"}
            
            progress = self.db_service.get_user_progress_summary(user_id)
            topic_data = LEARNING_STRUCTURE[topic_id]
            total_lessons = len(topic_data["lessons"])
            
            if topic_id not in progress.topics_progress:
                return {
                    "topic_id": topic_id,
                    "status": TopicStatus.AVAILABLE.value,
                    "completed_lessons": 0,
                    "total_lessons": total_lessons,
                    "completion_percentage": 0,
                    "average_score": 0,
                    "attempts": 0
                }
            
            topic_progress = progress.topics_progress[topic_id]
            completed_lessons = topic_progress.get("completed_lessons", 0)
            average_score = topic_progress.get("average_score", 0)
            total_attempts = topic_progress.get("total_attempts", 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–º—ã
            if completed_lessons == 0:
                status = TopicStatus.AVAILABLE
            elif completed_lessons == total_lessons:
                status = TopicStatus.COMPLETED
            else:
                status = TopicStatus.IN_PROGRESS
            
            return {
                "topic_id": topic_id,
                "status": status.value,
                "completed_lessons": completed_lessons,
                "total_lessons": total_lessons,
                "completion_percentage": (completed_lessons / total_lessons) * 100,
                "average_score": average_score,
                "attempts": total_attempts,
                "performance_level": self._get_performance_level(average_score)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–º—ã {topic_id} –¥–ª—è {user_id}: {e}")
            return {"error": str(e)}
    
    def calculate_lesson_progress(self, user_id: str, topic_id: str, lesson_id: int) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫—É"""
        try:
            lesson_progress = self.db_service.get_lesson_progress(user_id, topic_id, lesson_id)
            
            if not lesson_progress:
                return {
                    "topic_id": topic_id,
                    "lesson_id": lesson_id,
                    "status": LessonStatus.AVAILABLE.value,
                    "attempts": 0,
                    "best_score": 0,
                    "last_score": 0,
                    "is_completed": False
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞
            if lesson_progress.is_completed:
                status = LessonStatus.COMPLETED
            elif lesson_progress.attempts > 0:
                status = LessonStatus.IN_PROGRESS
            else:
                status = LessonStatus.AVAILABLE
            
            return {
                "topic_id": topic_id,
                "lesson_id": lesson_id,
                "status": status.value,
                "attempts": lesson_progress.attempts,
                "best_score": lesson_progress.best_score,
                "last_score": lesson_progress.last_attempt_score,
                "is_completed": lesson_progress.is_completed,
                "started_at": lesson_progress.started_at.isoformat() if lesson_progress.started_at else None,
                "completed_at": lesson_progress.completed_at.isoformat() if lesson_progress.completed_at else None,
                "performance_level": self._get_performance_level(lesson_progress.best_score)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞ {lesson_id} –¥–ª—è {user_id}: {e}")
            return {"error": str(e)}
    
    def get_overall_statistics(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            progress = self.db_service.get_user_progress_summary(user_id)
            
            # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            total_lessons_available = sum(
                len(topic_data["lessons"]) 
                for topic_data in LEARNING_STRUCTURE.values()
            )
            
            completion_rate = (progress.total_lessons_completed / total_lessons_available) * 100
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º
            topics_stats = {}
            for topic_id in TOPIC_ORDER:
                topics_stats[topic_id] = self.calculate_topic_progress(user_id, topic_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞
            weak_topics = [
                topic_id for topic_id, stats in topics_stats.items()
                if stats.get("average_score", 0) < ScoreRanges.GOOD_MIN and stats.get("attempts", 0) > 0
            ]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
            strong_topics = [
                topic_id for topic_id, stats in topics_stats.items()
                if stats.get("average_score", 0) >= ScoreRanges.EXCELLENT_MIN
            ]
            
            return {
                "user_id": user_id,
                "overall_completion": completion_rate,
                "total_lessons_completed": progress.total_lessons_completed,
                "total_lessons_available": total_lessons_available,
                "average_score": progress.total_score,
                "topics_statistics": topics_stats,
                "weak_topics": weak_topics,
                "strong_topics": strong_topics,
                "learning_streak": self._calculate_learning_streak(user_id),
                "estimated_completion_time": self._estimate_completion_time(progress)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id}: {e}")
            return {"error": str(e)}
    
    def check_achievements(self, user_id: str) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            progress = self.db_service.get_user_progress_summary(user_id)
            achievements = []
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—Ä–æ–∫–æ–≤
            if progress.total_lessons_completed >= 1:
                achievements.append({
                    "id": "first_lesson",
                    "title": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
                    "description": "–ó–∞–≤–µ—Ä—à–µ–Ω –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫",
                    "icon": "üéØ"
                })
            
            if progress.total_lessons_completed >= 5:
                achievements.append({
                    "id": "five_lessons",
                    "title": "–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–µ–Ω–∏–∫",
                    "description": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ 5 —É—Ä–æ–∫–æ–≤",
                    "icon": "üìö"
                })
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –æ—Ü–µ–Ω–∫–∞–º
            if progress.total_score >= ScoreRanges.EXCELLENT_MIN:
                achievements.append({
                    "id": "excellent_student",
                    "title": "–û—Ç–ª–∏—á–Ω–∏–∫",
                    "description": f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ {progress.total_score:.1f}%",
                    "icon": "‚≠ê"
                })
            
            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º
            for topic_id in TOPIC_ORDER:
                topic_stats = self.calculate_topic_progress(user_id, topic_id)
                if topic_stats.get("status") == TopicStatus.COMPLETED.value:
                    topic_title = LEARNING_STRUCTURE[topic_id]["title"]
                    achievements.append({
                        "id": f"topic_{topic_id}",
                        "title": f"–ú–∞—Å—Ç–µ—Ä —Ç–µ–º—ã",
                        "description": f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ç–µ–º–∞: {topic_title}",
                        "icon": "üèÜ"
                    })
            
            return achievements
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è {user_id}: {e}")
            return []
    
    def generate_progress_report(self, user_id: str) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        try:
            stats = self.get_overall_statistics(user_id)
            
            if "error" in stats:
                return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
            
            report = f"üìä **–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è**\n\n"
            report += f"üéØ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {stats['overall_completion']:.1f}%\n"
            report += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {stats['total_lessons_completed']}/{stats['total_lessons_available']}\n"
            report += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['average_score']:.1f}%\n\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º
            report += "üìö **–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º:**\n"
            for topic_id, topic_stats in stats['topics_statistics'].items():
                topic_title = LEARNING_STRUCTURE[topic_id]["title"]
                completion = topic_stats.get('completion_percentage', 0)
                avg_score = topic_stats.get('average_score', 0)
                
                status_emoji = "‚úÖ" if completion == 100 else "üîÑ" if completion > 0 else "‚è≥"
                report += f"{status_emoji} {topic_title}: {completion:.0f}% ({avg_score:.1f}%)\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if stats['weak_topics']:
                report += f"\nüí° **–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**\n"
                for topic_id in stats['weak_topics']:
                    topic_title = LEARNING_STRUCTURE[topic_id]["title"]
                    report += f"‚Ä¢ {topic_title}\n"
            
            if stats['strong_topics']:
                report += f"\nüåü **–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**\n"
                for topic_id in stats['strong_topics']:
                    topic_title = LEARNING_STRUCTURE[topic_id]["title"]
                    report += f"‚Ä¢ {topic_title}\n"
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {user_id}: {e}")
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _get_available_topics(self, progress) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã"""
        available = ["–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤"]  # –ü–µ—Ä–≤–∞—è —Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        
        for i, topic_id in enumerate(TOPIC_ORDER[1:], 1):
            prev_topic = TOPIC_ORDER[i-1]
            prev_stats = self.calculate_topic_progress(progress.user_id, prev_topic)
            
            if prev_stats.get("status") == TopicStatus.COMPLETED.value:
                available.append(topic_id)
            else:
                break
        
        return available
    
    def _get_available_lessons(self, topic_id: str, progress) -> List[int]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ –≤ —Ç–µ–º–µ"""
        if topic_id not in progress.topics_progress:
            return [1]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
        
        topic_progress = progress.topics_progress[topic_id]
        lessons_data = topic_progress.get("lessons", {})
        available = [1]  # –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        
        total_lessons = len(LEARNING_STRUCTURE[topic_id]["lessons"])
        
        for lesson_id in range(1, total_lessons + 1):
            lesson_key = str(lesson_id)
            if lesson_key in lessons_data and lessons_data[lesson_key].get("is_completed"):
                next_lesson = lesson_id + 1
                if next_lesson <= total_lessons and next_lesson not in available:
                    available.append(next_lesson)
        
        return available
    
    def _generate_learning_recommendations(self, progress) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é"""
        recommendations = []
        
        if progress.total_lessons_completed == 0:
            recommendations.append("–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Å–Ω–æ–≤ - –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –∂–¥–µ—Ç –≤–∞—Å!")
        elif progress.total_score < ScoreRanges.GOOD_MIN:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª")
            recommendations.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–º–æ—â—å AI-–∞–≥–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è—Ö")
        elif progress.total_score >= ScoreRanges.EXCELLENT_MIN:
            recommendations.append("–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")
        
        return recommendations
    
    def _get_performance_level(self, score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏"""
        if score >= ScoreRanges.EXCELLENT_MIN:
            return "excellent"
        elif score >= ScoreRanges.GOOD_MIN:
            return "good"
        elif score >= ScoreRanges.SATISFACTORY_MIN:
            return "satisfactory"
        else:
            return "poor"
    
    def _calculate_learning_streak(self, user_id: str) -> int:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Å–µ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–¥–Ω–∏ –ø–æ–¥—Ä—è–¥)"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ–±–∞–≤–∏–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
        try:
            lessons_progress = self.db_service.get_user_lessons_progress(user_id)
            if not lessons_progress:
                return 0
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
            active_days = set()
            for lesson in lessons_progress:
                if lesson.completed_at:
                    active_days.add(lesson.completed_at.date())
            
            return len(active_days)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–µ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")
            return 0
    
    def _estimate_completion_time(self, progress) -> Optional[str]:
        """–û—Ü–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            if progress.total_lessons_completed == 0:
                return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"
            
            total_lessons = sum(len(topic_data["lessons"]) for topic_data in LEARNING_STRUCTURE.values())
            remaining_lessons = total_lessons - progress.total_lessons_completed
            
            if remaining_lessons == 0:
                return "–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —É—Ä–æ–∫ = 15 –º–∏–Ω—É—Ç
            estimated_minutes = remaining_lessons * 15
            
            if estimated_minutes < 60:
                return f"~{estimated_minutes} –º–∏–Ω—É—Ç"
            else:
                hours = estimated_minutes // 60
                return f"~{hours} —á–∞—Å–æ–≤"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
            return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"
    
    def _get_default_learning_path(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "current_position": {"topic": "–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤", "lesson": 1},
            "available_topics": ["–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤"],
            "available_lessons": {"–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤": [1]},
            "recommendations": ["–ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤ —Ä–∏—Å–∫–æ–≤"]
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
progress_service = ProgressService()