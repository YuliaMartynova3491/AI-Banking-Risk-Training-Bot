"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""
import logging
from datetime import datetime
from typing import Optional, List, Dict, Any
from contextlib import contextmanager
from sqlalchemy import create_engine, and_, text, func
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from config.settings import settings
from core.models import Base, UserProgress, LessonProgress, QuizSession, LessonHistory
from core.models import UserData, QuizResult, UserProgressResponse

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
engine = create_engine(
    settings.database_url,
    pool_size=10,                # –†–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    max_overflow=20,             # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
    pool_recycle=3600,           # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
    pool_pre_ping=True,          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    connect_args={"check_same_thread": False} if "sqlite" in settings.database_url else {},
    echo=False                   # –û—Ç–∫–ª—é—á–∞–µ–º SQL –ª–æ–≥–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
try:
    Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ [Database] –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
except Exception as e:
    logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    raise


class DatabaseService:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.session_factory = SessionLocal
        logger.info("üóÑÔ∏è [Database] –°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    @contextmanager
    def get_session(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–µ—Å—Å–∏–π –ë–î —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º rollback"""
        session = self.session_factory()
        try:
            yield session
            session.commit()
        except Exception as e:
            session.rollback()
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏ –ë–î: {e}")
            raise
        finally:
            session.close()
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        try:
            engine.dispose()
            logger.info("‚úÖ [Database] –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î: {e}")
    
    def get_users_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with self.get_session() as session:
                count = session.query(UserProgress).count()
                logger.debug(f"üìä [Database] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
                return count
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0
    
    def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î"""
        try:
            with self.get_session() as session:
                session.execute(text("SELECT 1"))
                logger.debug("‚úÖ [Database] Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
                return True
        except Exception as e:
            logger.error(f"‚ùå [Database] Health check –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            return False
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    
    def get_or_create_user(self, user_data: UserData) -> UserProgress:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_session() as session:
                user = session.query(UserProgress).filter(
                    UserProgress.user_id == user_data.user_id
                ).first()
                
                if not user:
                    user = UserProgress(
                        user_id=user_data.user_id,
                        username=user_data.username,
                        first_name=user_data.first_name,
                        last_name=user_data.last_name,
                        current_topic="–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤",  # –ü–µ—Ä–≤–∞—è —Ç–µ–º–∞
                        current_lesson=1
                    )
                    session.add(user)
                    session.commit()
                    session.refresh(user)
                    logger.info(f"üë§ [Database] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.user_id}")
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user.username = user_data.username
                    user.first_name = user_data.first_name
                    user.last_name = user_data.last_name
                    user.last_activity = datetime.utcnow()
                    logger.debug(f"üë§ [Database] –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.user_id}")
                
                return user
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.user_id}: {e}")
            raise
    
    def update_user_progress(self, user_id: str, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_session() as session:
                user = session.query(UserProgress).filter(
                    UserProgress.user_id == user_id
                ).first()
                
                if user:
                    for key, value in kwargs.items():
                        if hasattr(user, key):
                            setattr(user, key, value)
                    
                    user.last_activity = datetime.utcnow()
                    logger.debug(f"üìä [Database] –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {kwargs}")
                    return True
                return False
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —É—Ä–æ–∫–æ–≤
    
    def get_lesson_progress(self, user_id: str, topic_id: str, lesson_id: int) -> Optional[LessonProgress]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫—É"""
        try:
            with self.get_session() as session:
                progress = session.query(LessonProgress).filter(
                    and_(
                        LessonProgress.user_id == user_id,
                        LessonProgress.topic_id == topic_id,
                        LessonProgress.lesson_id == lesson_id
                    )
                ).first()
                
                logger.debug(f"üìñ [Database] –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞ {topic_id}.{lesson_id} –¥–ª—è {user_id}")
                return progress
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞: {e}")
            return None
    
    def get_or_create_lesson_progress(self, user_id: str, topic_id: str, lesson_id: int) -> LessonProgress:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫—É"""
        try:
            with self.get_session() as session:
                progress = session.query(LessonProgress).filter(
                    and_(
                        LessonProgress.user_id == user_id,
                        LessonProgress.topic_id == topic_id,
                        LessonProgress.lesson_id == lesson_id
                    )
                ).first()
                
                if not progress:
                    progress = LessonProgress(
                        user_id=user_id,
                        topic_id=topic_id,
                        lesson_id=lesson_id,
                        started_at=datetime.utcnow()
                    )
                    session.add(progress)
                    session.commit()
                    session.refresh(progress)
                    logger.info(f"üìù [Database] –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞ {topic_id}.{lesson_id} –¥–ª—è {user_id}")
                
                return progress
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞: {e}")
            raise
    
    def update_lesson_progress(self, user_id: str, topic_id: str, lesson_id: int, 
                             score: float, is_completed: bool = False) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞ –ò –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_session() as session:
                progress = session.query(LessonProgress).filter(
                    and_(
                        LessonProgress.user_id == user_id,
                        LessonProgress.topic_id == topic_id,
                        LessonProgress.lesson_id == lesson_id
                    )
                ).first()
                
                if not progress:
                    logger.warning(f"‚ö†Ô∏è [Database] –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {topic_id}.{lesson_id} –¥–ª—è {user_id}")
                    return False
                
                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                was_completed_before = progress.is_completed
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞
                progress.attempts += 1
                progress.last_attempt_score = score
                progress.last_attempt_at = datetime.utcnow()
                
                if score > progress.best_score:
                    progress.best_score = score
                
                if is_completed and not progress.is_completed:
                    progress.is_completed = True
                    progress.completed_at = datetime.utcnow()
                
                # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤–ø–µ—Ä–≤—ã–µ
                if is_completed and not was_completed_before:
                    self._update_user_total_progress(session, user_id)
                
                logger.info(f"üìä [Database] –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞ {topic_id}.{lesson_id}: score={score}, completed={is_completed}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞: {e}")
            return False
    
    def _update_user_total_progress(self, session: Session, user_id: str):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
            completed_lessons_count = session.query(LessonProgress).filter(
                and_(
                    LessonProgress.user_id == user_id,
                    LessonProgress.is_completed == True
                )
            ).count()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
            avg_score_result = session.query(
                func.avg(LessonProgress.best_score)
            ).filter(
                and_(
                    LessonProgress.user_id == user_id,
                    LessonProgress.is_completed == True
                )
            ).scalar()
            
            avg_score = float(avg_score_result) if avg_score_result else 0.0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(UserProgress).filter(
                UserProgress.user_id == user_id
            ).first()
            
            if user:
                user.total_lessons_completed = completed_lessons_count
                user.total_score = avg_score
                user.last_activity = datetime.utcnow()
                
                # –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é (—Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–∫)
                next_position = self._find_next_available_position(session, user_id)
                if next_position:
                    user.current_topic = next_position['topic']
                    user.current_lesson = next_position['lesson']
                
                logger.info(f"‚úÖ [Database] –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {user_id}: {completed_lessons_count} —É—Ä–æ–∫–æ–≤, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            raise
    
    def _find_next_available_position(self, session: Session, user_id: str) -> Optional[Dict[str, Any]]:
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            from config.bot_config import LEARNING_STRUCTURE
            
            for topic_id, topic_data in LEARNING_STRUCTURE.items():
                for lesson in topic_data["lessons"]:
                    lesson_id = lesson["id"]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É—Ä–æ–∫
                    lesson_progress = session.query(LessonProgress).filter(
                        and_(
                            LessonProgress.user_id == user_id,
                            LessonProgress.topic_id == topic_id,
                            LessonProgress.lesson_id == lesson_id,
                            LessonProgress.is_completed == True
                        )
                    ).first()
                    
                    # –ï—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω - —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è
                    if not lesson_progress:
                        return {"topic": topic_id, "lesson": lesson_id}
            
            # –ï—Å–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            return {"topic": "–æ—Ü–µ–Ω–∫–∞_—Ä–∏—Å–∫–æ–≤", "lesson": 7}  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫
            
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None
    
    def get_user_lessons_progress(self, user_id: str) -> List[LessonProgress]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É—Ä–æ–∫–∞–º"""
        try:
            with self.get_session() as session:
                progress_list = session.query(LessonProgress).filter(
                    LessonProgress.user_id == user_id
                ).all()
                
                logger.debug(f"üìö [Database] –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ {len(progress_list)} —É—Ä–æ–∫–∞–º –¥–ª—è {user_id}")
                return progress_list
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–æ–≤: {e}")
            return []
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    def create_quiz_session(self, user_id: str, topic_id: str, lesson_id: int, 
                           questions: List[Dict[str, Any]]) -> QuizSession:
        """–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with self.get_session() as session:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                session.query(QuizSession).filter(
                    and_(
                        QuizSession.user_id == user_id,
                        QuizSession.topic_id == topic_id,
                        QuizSession.lesson_id == lesson_id,
                        QuizSession.is_completed == False
                    )
                ).delete()
                
                quiz_session = QuizSession(
                    user_id=user_id,
                    topic_id=topic_id,
                    lesson_id=lesson_id,
                    questions=questions
                )
                session.add(quiz_session)
                session.commit()
                session.refresh(quiz_session)
                
                logger.info(f"üß™ [Database] –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {quiz_session.id} –¥–ª—è {user_id}")
                return quiz_session
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise
    
    def get_active_quiz_session(self, user_id: str) -> Optional[QuizSession]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with self.get_session() as session:
                session_obj = session.query(QuizSession).filter(
                    and_(
                        QuizSession.user_id == user_id,
                        QuizSession.is_completed == False
                    )
                ).first()
                
                if session_obj:
                    logger.debug(f"üß™ [Database] –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è {session_obj.id} –¥–ª—è {user_id}")
                
                return session_obj
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
            return None
    
    def update_quiz_session(self, session_id: int, **kwargs) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with self.get_session() as session:
                quiz_session = session.query(QuizSession).filter(
                    QuizSession.id == session_id
                ).first()
                
                if quiz_session:
                    for key, value in kwargs.items():
                        if hasattr(quiz_session, key):
                            setattr(quiz_session, key, value)
                    
                    logger.debug(f"üß™ [Database] –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {session_id}")
                    return True
                return False
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def complete_quiz_session(self, session_id: int, final_score: float) -> bool:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with self.get_session() as session:
                quiz_session = session.query(QuizSession).filter(
                    QuizSession.id == session_id
                ).first()
                
                if quiz_session:
                    quiz_session.is_completed = True
                    quiz_session.score = final_score
                    quiz_session.completed_at = datetime.utcnow()
                    
                    logger.info(f"‚úÖ [Database] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {session_id} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {final_score}%")
                    return True
                return False
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
    
    def get_user_progress_summary(self, user_id: str) -> UserProgressResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_session() as session:
                user = session.query(UserProgress).filter(
                    UserProgress.user_id == user_id
                ).first()
                
                if not user:
                    logger.debug(f"üë§ [Database] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
                    return UserProgressResponse(
                        user_id=user_id,
                        total_lessons_completed=0,
                        total_score=0.0,
                        current_topic=None,
                        current_lesson=1,
                        topics_progress={}
                    )
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º
                lessons_progress = session.query(LessonProgress).filter(
                    LessonProgress.user_id == user_id
                ).all()
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–º–∞–º
                topics_progress = {}
                for progress in lessons_progress:
                    topic_id = progress.topic_id
                    if topic_id not in topics_progress:
                        topics_progress[topic_id] = {
                            "completed_lessons": 0,
                            "total_attempts": 0,
                            "average_score": 0.0,
                            "lessons": {}
                        }
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º lesson_id –∫–∞–∫ int, –ù–ï –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    topics_progress[topic_id]["lessons"][progress.lesson_id] = {
                        "is_completed": progress.is_completed,
                        "best_score": progress.best_score,
                        "attempts": progress.attempts,
                        "last_attempt_at": progress.last_attempt_at.isoformat() if progress.last_attempt_at else None
                    }
                    
                    if progress.is_completed:
                        topics_progress[topic_id]["completed_lessons"] += 1
                    
                    topics_progress[topic_id]["total_attempts"] += progress.attempts
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
                for topic_data in topics_progress.values():
                    completed_lessons = [
                        lesson for lesson in topic_data["lessons"].values() 
                        if lesson["is_completed"]
                    ]
                    if completed_lessons:
                        topic_data["average_score"] = sum(
                            lesson["best_score"] for lesson in completed_lessons
                        ) / len(completed_lessons)
                
                logger.debug(f"üìä [Database] –ü–æ–ª—É—á–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {user_id}")
                
                return UserProgressResponse(
                    user_id=user_id,
                    total_lessons_completed=user.total_lessons_completed,
                    total_score=user.total_score,
                    current_topic=user.current_topic,
                    current_lesson=user.current_lesson,
                    topics_progress=topics_progress
                )
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            raise
    
    def reset_user_progress(self, user_id: str) -> bool:
        """–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.get_session() as session:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º
                deleted_lessons = session.query(LessonProgress).filter(
                    LessonProgress.user_id == user_id
                ).delete()
                
                # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                deleted_sessions = session.query(QuizSession).filter(
                    QuizSession.user_id == user_id
                ).delete()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = session.query(UserProgress).filter(
                    UserProgress.user_id == user_id
                ).first()
                
                if user:
                    user.total_lessons_completed = 0
                    user.total_score = 0.0
                    user.current_topic = "–æ—Å–Ω–æ–≤—ã_—Ä–∏—Å–∫–æ–≤"
                    user.current_lesson = 1
                    user.last_activity = datetime.utcnow()
                
                logger.info(f"üîÑ [Database] –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω: {deleted_lessons} —É—Ä–æ–∫–æ–≤, {deleted_sessions} —Å–µ—Å—Å–∏–π")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def get_learning_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è"""
        try:
            with self.get_session() as session:
                total_users = session.query(UserProgress).count()
                active_users = session.query(UserProgress).filter(
                    UserProgress.total_lessons_completed > 0
                ).count()
                
                completed_lessons = session.query(LessonProgress).filter(
                    LessonProgress.is_completed == True
                ).count()
                
                total_attempts = session.query(LessonProgress).count()
                
                stats = {
                    "total_users": total_users,
                    "active_users": active_users,
                    "completed_lessons": completed_lessons,
                    "total_attempts": total_attempts,
                    "average_completion_rate": (completed_lessons / total_attempts * 100) if total_attempts > 0 else 0
                }
                
                logger.debug(f"üìà [Database] –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {stats}")
                return stats
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —É—Ä–æ–∫–æ–≤
    
    def save_lesson_session(self, user_id: str, topic_id: str, lesson_id: int, 
                           material_viewed: str = None, questions: list = None, 
                           answers: list = None, score: float = 0.0) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é —É—Ä–æ–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            with self.get_session() as session:
                history_entry = LessonHistory(
                    user_id=user_id,
                    topic_id=topic_id,
                    lesson_id=lesson_id,
                    lesson_material_viewed=material_viewed,
                    questions_asked=questions,
                    answers_given=answers,
                    final_score=score
                )
                session.add(history_entry)
                
                logger.debug(f"üìù [Database] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —É—Ä–æ–∫–∞ {topic_id}.{lesson_id} –¥–ª—è {user_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É—Ä–æ–∫–∞: {e}")
            return False
    
    def get_lesson_history(self, user_id: str, topic_id: str, lesson_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
        try:
            with self.get_session() as session:
                history = session.query(LessonHistory).filter(
                    and_(
                        LessonHistory.user_id == user_id,
                        LessonHistory.topic_id == topic_id,
                        LessonHistory.lesson_id == lesson_id
                    )
                ).order_by(LessonHistory.session_date.desc()).all()
                
                result = [
                    {
                        "date": h.session_date.isoformat(),
                        "material_viewed": h.lesson_material_viewed,
                        "questions": h.questions_asked,
                        "answers": h.answers_given,
                        "score": h.final_score
                    }
                    for h in history
                ]
                
                logger.debug(f"üìö [Database] –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è {len(result)} —Å–µ—Å—Å–∏–π —É—Ä–æ–∫–∞ {topic_id}.{lesson_id}")
                return result
                
        except Exception as e:
            logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É—Ä–æ–∫–∞: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
db_service = DatabaseService()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
def test_database_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–µ—Ä–≤–∏—Å–∞ –ë–î"""
    try:
        logger.info("üß™ [Database] –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ë–î...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
        if not db_service.health_check():
            raise Exception("Health check –ø—Ä–æ–≤–∞–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = db_service.get_users_count()
        logger.info(f"üë• [Database] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        
        logger.info("‚úÖ [Database] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå [Database] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {e}")
        return False

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    test_database_service()