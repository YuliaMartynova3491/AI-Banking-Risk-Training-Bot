"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–∞
"""
import asyncio
import logging
import sys
import signal
from pathlib import Path

from telegram.ext import Application

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import settings
from bot.handlers.start_handler import register_start_handlers
from bot.handlers.menu_handler import register_menu_handlers
from bot.handlers.lesson_handler import register_lesson_handlers
from bot.handlers.quiz_handler import register_quiz_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logging.basicConfig(
        level=getattr(logging, settings.log_level.upper()),
        format=log_format,
        handlers=[
            logging.FileHandler(settings.log_file, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ telegram –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.INFO)
    logging.getLogger("httpcore").setLevel(logging.WARNING)
    
    logger = logging.getLogger(__name__)
    logger.info("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    return logger


def create_application() -> Application:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(settings.telegram_bot_token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–≥—Ä—É–ø–ø—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
    
    register_start_handlers(application)    # –ì—Ä—É–ø–ø–∞ 0 - –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç–∞
    logger.info("Start handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    register_menu_handlers(application)     # –ì—Ä—É–ø–ø–∞ 1 - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    logger.info("Menu handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    register_lesson_handlers(application)   # –ì—Ä—É–ø–ø–∞ 2 - —É—Ä–æ–∫–∏
    logger.info("Lesson handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    register_quiz_handlers(application)     # –ì—Ä—É–ø–ø–∞ 3 - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("Quiz handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    return application


async def startup_checks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from core.database import db_service
        stats = db_service.get_learning_statistics()
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}")
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG —Å–µ—Ä–≤–∏—Å
        from services.rag_service import rag_service
        collection_count = rag_service.collection.count()
        logger.info(f"RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞. –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {collection_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI-–∞–≥–µ–Ω—Ç
        from ai_agent.agent_graph import learning_agent
        logger.info("AI –∞–≥–µ–Ω—Ç (LearningAIAgent) –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å —Å—Ç–∏–∫–µ—Ä–æ–≤
        from services.sticker_service import sticker_service
        test_sticker = sticker_service.get_welcome_sticker()
        logger.info(f"–°–µ—Ä–≤–∏—Å —Å—Ç–∏–∫–µ—Ä–æ–≤ –≥–æ—Ç–æ–≤. –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—É—á–µ–Ω: {test_sticker[:20]}...")
        
        logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º: {e}")
        raise


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger = logging.getLogger(__name__)
    logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    
    if app:
        logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI-–∞–≥–µ–Ω—Ç–∞...")
        asyncio.create_task(app.stop())


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global app
    logger = setup_logging()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI-–∞–≥–µ–Ω—Ç–∞ Risk Continuity Training Bot")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await startup_checks()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_application()
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä
        print("\n" + "="*60)
        print("ü§ñ AI-–ê–ì–ï–ù–¢ RISK CONTINUITY TRAINING BOT")
        print("="*60)
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üìö –û–±—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞ —Å –ò–ò")
        print("üí¨ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        print("üß† OpenAI LLM –ø–æ–¥–∫–ª—é—á–µ–Ω")
        print("="*60)
        
        logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await app.run_polling(
            drop_pending_updates=True,
            allowed_updates=['message', 'callback_query'],
            close_loop=False
        )
        
        logger.info("‚úÖ AI-–∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info("‚è≥ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        
    except KeyboardInterrupt:
        logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI-–∞–≥–µ–Ω—Ç–∞...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if app:
            try:
                logger.info("Updater –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                await app.stop()
                logger.info("Application –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                await app.shutdown()
                logger.info("Application –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
        
        logger.info("üëã AI-–∞–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)