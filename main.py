"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ knowledge_base
"""
import logging
import sys
from pathlib import Path

from telegram.ext import Application
from telegram import Update, Bot
from telegram.ext import ContextTypes

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import settings
from bot.handlers.start_handler import register_start_handlers
from bot.handlers.menu_handler import register_menu_handlers
from bot.handlers.lesson_handler import register_lesson_handlers
from bot.handlers.quiz_handler import register_quiz_handlers

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
def setup_logging():
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(
        level=getattr(logging, settings.log_level.upper(), logging.INFO),
        format=log_format,
        handlers=[logging.FileHandler(settings.log_file, encoding='utf-8'), logging.StreamHandler(sys.stdout)]
    )
    logging.getLogger("httpx").setLevel(logging.WARNING)
    return logging.getLogger(__name__)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger = logging.getLogger(__name__)
    logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: {context.error}", exc_info=context.error)
    if isinstance(update, Update) and update.effective_chat:
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º ---
def run_startup_checks():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    logger = logging.getLogger(__name__)
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    from core.database import db_service
    if not db_service.health_check():
        logger.critical("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!")
        raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_service.get_users_count()}")

    from core.knowledge_base import get_knowledge_base # <-- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢
    kb = get_knowledge_base()
    if kb.collection.count() == 0:
         logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞!")
    else:
        logger.info(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞. –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {kb.collection.count()}")

    from ai_agent.agent_graph import learning_agent
    if learning_agent.graph is None:
        logger.warning("‚ö†Ô∏è AI –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω).")
    else:
        logger.info("‚úÖ AI –∞–≥–µ–Ω—Ç (LearningAIAgent) –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger = setup_logging()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI-–∞–≥–µ–Ω—Ç–∞ Risk Continuity Training Bot")
    
    try:
        run_startup_checks()
        
        application = Application.builder().token(settings.telegram_bot_token).build()
        
        register_start_handlers(application)
        register_menu_handlers(application)
        register_lesson_handlers(application)
        register_quiz_handlers(application)
        
        application.add_error_handler(error_handler)
        
        logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–ø—É—Å–∫ polling...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()