"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
"""
import logging
import sys
import asyncio
import signal
import traceback
from pathlib import Path
from logging.handlers import RotatingFileHandler

from telegram.ext import Application
from telegram import Update
from telegram.ext import ContextTypes

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import settings

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
shutdown_event = asyncio.Event()

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
        log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        root_logger = logging.getLogger()
        root_logger.setLevel(getattr(logging, settings.log_level.upper(), logging.INFO))
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        file_handler = RotatingFileHandler(
            settings.log_file_path,
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(logging.Formatter(log_format))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(logging.Formatter(log_format))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        root_logger.addHandler(file_handler)
        root_logger.addHandler(console_handler)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        logging.getLogger("httpx").setLevel(logging.WARNING)
        logging.getLogger("urllib3").setLevel(logging.WARNING)
        logging.getLogger("telegram").setLevel(logging.WARNING)
        
        logger = logging.getLogger(__name__)
        logger.info("‚úÖ [Logging] –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"üìù [Logging] –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤: {settings.log_file_path}")
        
        return logger
        
    except Exception as e:
        print(f"‚ùå [Logging] –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–∫ fallback
        logging.basicConfig(
            level=logging.INFO,
            format=log_format,
            handlers=[logging.StreamHandler(sys.stdout)]
        )
        return logging.getLogger(__name__)

async def initialize_agent_systems():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –∞–≥–µ–Ω—Ç–∞"""
    logger = logging.getLogger(__name__)
    logger.info("üöÄ [Startup] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º AI-–∞–≥–µ–Ω—Ç–∞...")
    
    initialization_steps = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", initialize_database),
        ("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", initialize_knowledge_base),
        ("AI-–∞–≥–µ–Ω—Ç LangGraph", initialize_ai_agent),
        ("–°–µ—Ä–≤–∏—Å—ã", initialize_services)
    ]
    
    for step_name, init_func in initialization_steps:
        try:
            logger.info(f"‚öôÔ∏è [Startup] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {step_name}")
            await init_func()
            logger.info(f"‚úÖ [Startup] {step_name}: –≥–æ—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå [Startup] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {step_name}: {e}")
            logger.error(f"–¢—Ä–µ–π—Å: {traceback.format_exc()}")
            raise SystemExit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {step_name}")
    
    logger.info("üéâ [Startup] –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")

async def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger = logging.getLogger(__name__)
    
    try:
        from core.database import db_service
        
        if not db_service.health_check():
            raise Exception("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        users_count = db_service.get_users_count()
        logger.info(f"üë• [Database] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {users_count}")
        
    except Exception as e:
        logger.error(f"‚ùå [Database] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

async def initialize_knowledge_base():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    logger = logging.getLogger(__name__)
    
    try:
        from core.knowledge_base import get_knowledge_base
        
        kb = get_knowledge_base()
        if kb.collection.count() == 0:
            logger.warning("‚ö†Ô∏è [Knowledge] –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞!")
        else:
            logger.info(f"üìö [Knowledge] –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {kb.collection.count()} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
    except Exception as e:
        logger.error(f"‚ùå [Knowledge] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        raise

async def initialize_ai_agent():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-–∞–≥–µ–Ω—Ç–∞"""
    logger = logging.getLogger(__name__)
    
    try:
        from ai_agent.agent_graph import learning_agent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞
        if not learning_agent.graph:
            logger.warning("‚ö†Ô∏è [Agent] –ì—Ä–∞—Ñ –∞–≥–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.info("ü§ñ [Agent] LangGraph –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤")
            
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞
        test_response = learning_agent.provide_learning_assistance(
            user_id="test_user",
            question="–¢–µ—Å—Ç"
        )
        
        if test_response and len(test_response) > 5:
            logger.info("‚úÖ [Agent] –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è [Agent] –¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –ø–æ–∫–∞–∑–∞–ª –ø—Ä–æ–±–ª–µ–º—ã")
            
    except Exception as e:
        logger.error(f"‚ùå [Agent] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        logger.warning("‚ö†Ô∏è [Agent] –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")

async def initialize_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logger = logging.getLogger(__name__)
    
    try:
        from services.adaptive_content_service import adaptive_content_service
        from services.user_analysis_service import user_analysis_service
        from services.sticker_service import sticker_service
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        adaptive_content_service._initialize_llm()
        
        logger.info("üîß [Services] –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå [Services] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        raise

def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger = logging.getLogger(__name__)
    
    def signal_handler(signum, frame):
        logger.info(f"üõë [Shutdown] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞—é graceful shutdown...")
        shutdown_event.set()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

async def graceful_shutdown(application=None):
    """Graceful shutdown –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    logger = logging.getLogger(__name__)
    logger.info("üõë [Shutdown] –ù–∞—á–∏–Ω–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        if application:
            logger.info("üì± [Shutdown] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
            await application.stop()
            await application.shutdown()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        try:
            from core.database import db_service
            db_service.close()
            logger.info("üóÑÔ∏è [Shutdown] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå [Shutdown] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ë–î: {e}")
        
        logger.info("‚úÖ [Shutdown] –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå [Shutdown] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∞–≥–µ–Ω—Ç–∞"""
    logger = logging.getLogger(__name__)
    logger.info("ü§ñ [Main] –ó–∞–ø—É—Å–∫ AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–∏—Å–∫–∞–º")
    
    application = None
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        setup_signal_handlers()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–∞
        await initialize_agent_systems()
        
        # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(settings.telegram_bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_all_handlers(application)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üöÄ [Main] –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await application.initialize()
        await application.start()
        await application.updater.start_polling(drop_pending_updates=True)
        
        logger.info("‚úÖ [Main] AI-–∞–≥–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("üì± [Main] –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram...")
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await shutdown_event.wait()
        
    except Exception as e:
        logger.error(f"‚ùå [Main] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–¢—Ä–µ–π—Å: {traceback.format_exc()}")
        return 1
    
    finally:
        # Graceful shutdown
        await graceful_shutdown(application)
    
    return 0

def register_all_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    logger = logging.getLogger(__name__)
    
    try:
        from bot.handlers.start_handler import register_start_handlers
        from bot.handlers.menu_handler import register_menu_handlers
        from bot.handlers.lesson_handler import register_lesson_handlers
        from bot.handlers.quiz_handler import register_quiz_handlers
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_start_handlers(application)
        register_menu_handlers(application)
        register_lesson_handlers(application)
        register_quiz_handlers(application)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∞–≥–µ–Ω—Ç–∞
        application.add_error_handler(agent_error_handler)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        try:
            from bot.handlers.admin_handler import register_admin_handlers
            register_admin_handlers(application)
            logger.info("üîß [Handlers] –ê–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        except ImportError:
            logger.info("‚ÑπÔ∏è [Handlers] –ê–¥–º–∏–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
        
        logger.info("‚úÖ [Handlers] –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå [Handlers] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        raise

async def agent_error_handler(update, context):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    logger = logging.getLogger(__name__)
    logger.error(f"üö® [AgentError] –û—à–∏–±–∫–∞ –≤ –∞–≥–µ–Ω—Ç–µ: {context.error}")
    logger.error(f"–¢—Ä–µ–π—Å: {traceback.format_exc()}")
    
    if update and update.effective_chat:
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="ü§ñ AI-–∞–≥–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–∫–∞."
            )
        except Exception as e:
            logger.error(f"‚ùå [AgentError] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
    logger = setup_logging()
    
    try:
        logger.info("üé¨ [Main] –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AI-–∞–≥–µ–Ω—Ç–∞")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from config.settings import print_config_summary
        print_config_summary()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
        
    except KeyboardInterrupt:
        logger.info("üëã [Main] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• [Main] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–¢—Ä–µ–π—Å: {traceback.format_exc()}")
        sys.exit(1)