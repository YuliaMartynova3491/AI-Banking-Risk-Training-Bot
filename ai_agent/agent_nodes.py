"""
–£–∑–ª—ã (nodes) –¥–ª—è AI-–∞–≥–µ–Ω—Ç–∞ –Ω–∞ LangGraph
"""
import logging
import traceback
from typing import Dict, Any, Optional
from langchain_core.messages import HumanMessage, SystemMessage

logger = logging.getLogger(__name__)

class AgentNodes:
    llm = None
    knowledge_base = None
    
    @classmethod
    def initialize_llm(cls):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if cls.llm is None:
            try:
                from config.settings import settings
                from langchain_openai import ChatOpenAI
                
                logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∞–≥–µ–Ω—Ç–∞...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
                if not settings.openai_api_key:
                    logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
                    return False
                
                # –°–æ–∑–¥–∞–µ–º LLM —Å timeout –∏ retry
                cls.llm = ChatOpenAI(
                    model=settings.openai_model,
                    api_key=settings.openai_api_key,
                    temperature=0.3,
                    max_tokens=1000,
                    timeout=30,  # 30 —Å–µ–∫—É–Ω–¥ timeout
                    max_retries=3  # 3 –ø–æ–ø—ã—Ç–∫–∏
                )
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º LLM
                test_response = cls.llm.invoke([HumanMessage(content="–¢–µ—Å—Ç")])
                logger.info(f"‚úÖ LLM –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ: {test_response.content[:50]}...")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM –∞–≥–µ–Ω—Ç–∞: {e}")
                logger.error(f"–¢—Ä–µ–π—Å: {traceback.format_exc()}")
                cls.llm = None
                return False
    
    @staticmethod
    def provide_assistance_node(state: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üéØ [AgentNodes] –£–∑–µ–ª –ø–æ–º–æ—â–Ω–∏–∫–∞ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
        logger.info(f"üîç [AgentNodes] –í—Ö–æ–¥—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {list(state.keys())}")
        
        user_question = state.get("user_question", "")
        if not user_question:
            logger.warning("‚ö†Ô∏è [AgentNodes] –ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return {**state, "assistance_response": "–ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."}
        
        logger.info(f"‚ùì [AgentNodes] –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_question}'")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not AgentNodes.llm:
                logger.info("üîÑ [AgentNodes] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM...")
                if not AgentNodes.initialize_llm():
                    logger.error("‚ùå [AgentNodes] LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return {**state, "assistance_response": "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_analysis = state.get("user_analysis", {})
            topic = state.get("topic")
            lesson_id = state.get("lesson_id")
            
            logger.info(f"üë§ [AgentNodes] –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_analysis}")
            logger.info(f"üìö [AgentNodes] –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Ç–µ–º–∞={topic}, —É—Ä–æ–∫={lesson_id}")
            
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            relevant_content = AgentNodes._search_knowledge_base(user_question, topic)
            
            if not relevant_content:
                logger.warning("‚ö†Ô∏è [AgentNodes] –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {**state, "assistance_response": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–∫–∞."}
            
            logger.info(f"üìñ [AgentNodes] –ù–∞–π–¥–µ–Ω–æ {len(relevant_content)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            system_prompt = AgentNodes._build_agent_system_prompt(user_analysis, topic, lesson_id)
            context_prompt = AgentNodes._build_context_prompt(relevant_content, user_question)
            
            logger.info("üß† [AgentNodes] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM –∞–≥–µ–Ω—Ç—É...")
            
            # –í—ã–∑—ã–≤–∞–µ–º LLM –∞–≥–µ–Ω—Ç
            messages = [
                SystemMessage(content=system_prompt),
                HumanMessage(content=context_prompt)
            ]
            
            response = AgentNodes.llm.invoke(messages)
            
            if not response or not response.content:
                logger.error("‚ùå [AgentNodes] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM")
                return {**state, "assistance_response": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."}
            
            clean_response = AgentNodes._clean_agent_response(response.content)
            logger.info(f"‚úÖ [AgentNodes] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞: {clean_response[:100]}...")
            
            return {**state, "assistance_response": clean_response}
            
        except Exception as e:
            logger.error(f"‚ùå [AgentNodes] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —É–∑–ª–µ –ø–æ–º–æ—â–Ω–∏–∫–∞: {e}")
            logger.error(f"–¢—Ä–µ–π—Å: {traceback.format_exc()}")
            return {**state, "assistance_response": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
    
    @staticmethod
    def _search_knowledge_base(query: str, topic_filter: str = None) -> list:
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
        try:
            logger.info(f"üîç [Knowledge] –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: '{query}', —Ñ–∏–ª—å—Ç—Ä={topic_filter}")
            
            from services.adaptive_content_service import adaptive_content_service
            
            results = adaptive_content_service.search_relevant_content(
                query=query,
                topic_filter=topic_filter,
                n_results=3  # –ë–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            )
            
            logger.info(f"üìö [Knowledge] –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå [Knowledge] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    @staticmethod
    def _build_agent_system_prompt(user_analysis: dict, topic: str, lesson_id: int) -> str:
        """–£–õ–£–ß–®–ï–ù–ù–´–ô —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        
        # –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_level = user_analysis.get('knowledge_level', 'beginner')
        weak_areas = user_analysis.get('weak_knowledge_areas', [])
        learning_style = user_analysis.get('learning_style', 'visual')
        
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π AI-–∞–≥–µ–Ω—Ç –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–∏—Å–∫–∞–º –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

–ö–û–ù–¢–ï–ö–°–¢ –û–ë–£–ß–ï–ù–ò–Ø:
- –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {topic}
- –£—Ä–æ–∫: {lesson_id}
- –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_level}
- –°–ª–∞–±—ã–µ –æ–±–ª–∞—Å—Ç–∏: {', '.join(weak_areas) if weak_areas else '–Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã'}
- –°—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è: {learning_style}

–¢–í–û–Ø –†–û–õ–¨:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤
2. –î–∞–≤–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
3. –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. –£—á–∏—Ç—ã–≤–∞–π —Å–ª–∞–±—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏
5. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏–∑ –æ–±–ª–∞—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏

–ü–†–ò–ù–¶–ò–ü–´ –û–¢–í–ï–¢–û–í:
- –¢–æ—á–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å—Ñ–µ—Ä—ã
- –°–≤—è–∑—å —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (–∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–∞—Ü–∏—é, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø—É–Ω–∫—Ç—ã)
- –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –∏–∑—É—á–µ–Ω–∏—é

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–ª–æ–≤."""

        return prompt
    
    @staticmethod
    def _build_context_prompt(relevant_content: list, user_question: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        
        context_parts = []
        for i, content in enumerate(relevant_content[:3], 1):
            doc_text = content.get('document', '')[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            context_parts.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i}:\n{doc_text}")
        
        context_text = "\n\n".join(context_parts)
        
        prompt = f"""–†–ï–õ–ï–í–ê–ù–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:
{context_text}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_question}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –∏ –¥–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–æ–ø–æ–ª–Ω–∏ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–∏—Å–∫–∞—Ö."""

        return prompt
    
    @staticmethod
    def _clean_agent_response(response: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        if not response:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        cleaned = response.strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(cleaned) > 1000:
            cleaned = cleaned[:1000] + "..."
        
        return cleaned

    @staticmethod
    def generate_questions_node(state: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–º"""
        logger.info("üìù [AgentNodes] –£–∑–µ–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
        
        try:
            user_id = state.get("user_id")
            topic = state.get("topic")
            lesson_id = state.get("lesson_id")
            
            if not all([user_id, topic, lesson_id]):
                logger.error(f"‚ùå [AgentNodes] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: user_id={user_id}, topic={topic}, lesson_id={lesson_id}")
                return {**state, "questions": []}
            
            logger.info(f"üìö [AgentNodes] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user_id}, —Ç–µ–º–∞={topic}, —É—Ä–æ–∫={lesson_id}")
            
            from services.adaptive_content_service import adaptive_content_service
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            questions = adaptive_content_service.generate_adaptive_questions(
                user_id=user_id,
                topic=topic,
                lesson_id=lesson_id
            )
            
            if not questions:
                logger.warning("‚ö†Ô∏è [AgentNodes] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
                return {**state, "questions": []}
            
            logger.info(f"‚úÖ [AgentNodes] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
            return {**state, "questions": questions}
            
        except Exception as e:
            logger.error(f"‚ùå [AgentNodes] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            logger.error(f"–¢—Ä–µ–π—Å: {traceback.format_exc()}")
            return {**state, "questions": []}