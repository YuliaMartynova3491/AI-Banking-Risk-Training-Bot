"""
AI-–∞–≥–µ–Ω—Ç –Ω–∞ LangGraph –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
"""
import logging
import traceback
from typing import Dict, Any, List, Optional, TypedDict
from langgraph.graph import StateGraph, END
from ai_agent.agent_nodes import AgentNodes

logger = logging.getLogger(__name__)

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è LangGraph
class AgentState(TypedDict):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è LangGraph"""
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_id: str
    user_question: Optional[str]
    action_type: Optional[str]  # "assistance" –∏–ª–∏ "generate_questions"
    topic: Optional[str]
    lesson_id: Optional[int]
    
    # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_analysis: Optional[Dict[str, Any]]
    
    # –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    assistance_response: Optional[str]
    questions: Optional[List[Dict[str, Any]]]
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    processing_steps: List[str]
    errors: List[str]
    execution_time: float

class LearningAIAgent:
    """AI-–∞–≥–µ–Ω—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self):
        self.graph = None
        self.app = None
        self._build_graph()
    
    def _build_graph(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∞–≥–µ–Ω—Ç–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
        try:
            logger.info("üèóÔ∏è [AgentGraph] –ù–∞—á–∞–ª–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –∞–≥–µ–Ω—Ç–∞...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º TypedDict –≤–º–µ—Å—Ç–æ dict
            workflow = StateGraph(AgentState)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –∞–≥–µ–Ω—Ç–∞
            workflow.add_node("analyze_user", AgentNodes.analyze_user_node)
            workflow.add_node("provide_assistance", AgentNodes.provide_assistance_node)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            workflow.set_entry_point("analyze_user")
            
            # –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
            workflow.add_conditional_edges(
                "analyze_user",
                self._route_after_analysis,
                {
                    "assistance": "provide_assistance",
                    "end": END
                }
            )
            
            workflow.add_edge("provide_assistance", END)
            
            # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≥—Ä–∞—Ñ
            self.app = workflow.compile()
            self.graph = workflow
            
            logger.info("‚úÖ [AgentGraph] –ì—Ä–∞—Ñ –∞–≥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå [AgentGraph] –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞: {e}")
            logger.error(f"–¢—Ä–µ–π—Å: {traceback.format_exc()}")
            # –ù–ï –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–≥–µ–Ω—Ç–∞
            self.graph = None
            self.app = None
    
    def _route_after_analysis(self, state: AgentState) -> str:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        action_type = state.get("action_type", "assistance")
        
        logger.info(f"üîÄ [AgentGraph] –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: action_type={action_type}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥ –≤ –ª–æ–≥
        steps = state.get("processing_steps", [])
        steps.append(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action_type}")
        state["processing_steps"] = steps
        
        if action_type == "assistance":
            return "assistance"
        else:
            logger.warning(f"‚ö†Ô∏è [AgentGraph] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
            return "end"
    
    def provide_learning_assistance(self, user_id: str, user_question: str, 
                                   topic: str = None, lesson_id: int = None) -> str:
        """–£–ü–†–û–©–ï–ù–ù–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞"""
        logger.info(f"üéØ [AgentGraph] –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç {user_id}: {user_question}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞
            if not self.app:
                logger.warning("‚ö†Ô∏è [AgentGraph] –ì—Ä–∞—Ñ –∞–≥–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self._get_fallback_response(user_question)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            initial_state: AgentState = {
                "user_id": user_id,
                "user_question": user_question,
                "action_type": "assistance",
                "topic": topic,
                "lesson_id": lesson_id,
                "user_analysis": None,
                "assistance_response": None,
                "questions": None,
                "processing_steps": ["–ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω"],
                "errors": [],
                "execution_time": 0.0
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≥—Ä–∞—Ñ –∞–≥–µ–Ω—Ç–∞
            final_state = self.app.invoke(initial_state)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response = final_state.get("assistance_response")
            errors = final_state.get("errors", [])
            
            if response and len(response) > 10:
                logger.info(f"‚úÖ [AgentGraph] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞: {response[:100]}...")
                return response
            else:
                logger.warning(f"‚ö†Ô∏è [AgentGraph] –ê–≥–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç. –û—à–∏–±–∫–∏: {errors}")
                return self._get_fallback_response(user_question)
                
        except Exception as e:
            logger.error(f"‚ùå [AgentGraph] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
            logger.error(f"–¢—Ä–µ–π—Å: {traceback.format_exc()}")
            return self._get_fallback_response(user_question)
    
    def _get_fallback_response(self, user_question: str) -> str:
        """–ó–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        question_lower = user_question.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if any(word in question_lower for word in ["—Ä–∏—Å–∫", "risk"]):
            return "–†–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ - —ç—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–∞–Ω–∫–∞. –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        
        elif any(word in question_lower for word in ["rto", "–≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"]):
            return "RTO (Recovery Time Objective) - —ç—Ç–æ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ—Å–ª–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞. –û–±—ã—á–Ω–æ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ —á–∞—Å–∞—Ö –∏–ª–∏ –¥–Ω—è—Ö."
        
        elif any(word in question_lower for word in ["mtpd", "–ø–µ—Ä–∏–æ–¥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"]):
            return "MTPD (Maximum Tolerable Period of Disruption) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —É—â–µ—Ä–± —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º."
        
        elif any(word in question_lower for word in ["—É–≥—Ä–æ–∑–∞", "—É–≥—Ä–æ–∑—ã"]):
            return "–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —É–≥—Ä–æ–∑: —Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–µ, –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ, –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏ –±–∏–æ–ª–æ–≥–æ-—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ. –ö–∞–∂–¥—ã–π —Ç–∏–ø —Ç—Ä–µ–±—É–µ—Ç —Å–≤–æ–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –æ—Ü–µ–Ω–∫–µ."
        
        elif any(word in question_lower for word in ["—É–æ—Ä", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"]):
            return "–£–û–† (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤) - –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ –≤ –±–∞–Ω–∫–µ."
        
        else:
            return "–ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
    
    def adapt_learning_path(self, user_id: str) -> Dict[str, Any]:
        """–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è"""
        logger.info(f"üéØ [AgentGraph] –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {user_id}")
        
        try:
            from core.database import db_service
            progress = db_service.get_user_progress_summary(user_id)
            
            total_completed = progress.total_lessons_completed
            avg_score = progress.total_score
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            if total_completed == 0:
                message = "üéØ –ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤ —Ä–∏—Å–∫–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏. –≠—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤—Å–µ–π –º–µ—Ç–æ–¥–∏–∫–∏."
                difficulty = "beginner"
            elif avg_score >= 90:
                message = "üåü –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
                difficulty = "advanced"
            elif avg_score >= 80:
                message = "‚úÖ –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–∞–∏–≤–∞–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö."
                difficulty = "intermediate"
            elif avg_score >= 60:
                message = "üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–¥–µ–ª–∏—Ç—å –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –∏–∑—É—á–µ–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–º–æ—â—å AI-–∞–≥–µ–Ω—Ç–∞."
                difficulty = "beginner"
            else:
                message = "üí™ –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ AI."
                difficulty = "beginner"
            
            return {
                "difficulty": difficulty,
                "message": message,
                "recommendations": [
                    "–ò–∑—É—á–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–º–æ—â—å AI-–∞–≥–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è—Ö",
                    "–ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã"
                ]
            }
            
        except Exception as e:
            logger.error(f"‚ùå [AgentGraph] –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—É—Ç–∏: {e}")
            return {
                "difficulty": "intermediate",
                "message": "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ–º–ø–µ!",
                "recommendations": ["–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"]
            }
    
    def get_personalized_encouragement(self, user_id: str, score: float, is_improvement: bool = False) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–æ—â—Ä–µ–Ω–∏—è"""
        if score >= 90:
            return "üåü –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ –æ—Ç–ª–∏—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞!"
        elif score >= 80:
            return "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã —Ö–æ—Ä–æ—à–æ —É—Å–≤–æ–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª!"
        elif score >= 70:
            return "üëè –•–æ—Ä–æ—à–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ, –≤—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!"
        elif is_improvement:
            return "üìà –ó–∞–º–µ—Ç–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        else:
            return "üí™ –ù–µ–ø–ª–æ—Ö–æ! –ï—â–µ –Ω–µ–º–Ω–æ–≥–æ —É—Å–∏–ª–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º!"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
learning_agent = LearningAIAgent()