"""
AI-–∞–≥–µ–Ω—Ç –Ω–∞ LangGraph –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
- –£–±—Ä–∞–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (—Ç–µ–ø–µ—Ä—å –≤ user_analysis_service)
- –£–ø—Ä–æ—â–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ state –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥—Ä–∞—Ñ–∞
- –£–±—Ä–∞–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã
"""
import logging
from typing import Dict, Any, List, Optional, Annotated

from langgraph.graph import StateGraph, END
from langchain_core.messages import BaseMessage, AIMessage
from langchain_openai import ChatOpenAI
from typing_extensions import TypedDict

from config.settings import settings
from services.adaptive_content_service import adaptive_content_service
from ai_agent.agent_nodes import AgentNodes

logger = logging.getLogger(__name__)


class AgentState(TypedDict):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π."""
    user_id: str
    messages: Annotated[List[BaseMessage], "–°–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏"]
    intent: Optional[str]
    user_question: Optional[str]
    topic: Optional[str]
    lesson_id: Optional[int]
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã —É–∑–ª–æ–≤
    user_analysis: Optional[Dict[str, Any]]
    assistance_response: Optional[str]
    adapted_difficulty: Optional[str]
    adaptation_message: Optional[str]
    error: Optional[str]


class LearningAIAgent:
    """AI-–∞–≥–µ–Ω—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."""

    def __init__(self):
        self.llm = None
        self.graph = None
        self._initialize()

    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞."""
        try:
            self.llm = ChatOpenAI(
                api_key=settings.openai_api_key,
                base_url=settings.openai_api_base,
                model=settings.openai_model,
                temperature=0.7
            )
            AgentNodes.llm = self.llm # –ü–µ—Ä–µ–¥–∞–µ–º LLM –≤ –∫–ª–∞—Å—Å —Å —É–∑–ª–∞–º–∏
            self.graph = self._create_agent_graph()
            logger.info("AI-–∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI-–∞–≥–µ–Ω—Ç–∞: {e}")
            self.graph = None # –ù–µ —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ, –µ—Å–ª–∏ –Ω–µ—Ç LLM

    def _create_agent_graph(self) -> StateGraph:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ AI-–∞–≥–µ–Ω—Ç–∞."""
        workflow = StateGraph(AgentState)
        workflow.add_node("analyze_user", AgentNodes.analyze_user_node)
        workflow.add_node("provide_assistance", AgentNodes.provide_assistance_node)
        workflow.add_node("adapt_path", AgentNodes.adapt_path_node)
        
        workflow.set_entry_point("analyze_user")
        
        workflow.add_conditional_edges(
            "analyze_user",
            self._route_after_analysis,
            {
                "assist": "provide_assistance",
                "adapt": "adapt_path",
                "end": END
            }
        )
        workflow.add_edge("provide_assistance", END)
        workflow.add_edge("adapt_path", END)
        
        return workflow.compile()

    def _route_after_analysis(self, state: AgentState) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        intent = state.get("intent", "assist")
        if intent == "assistance":
            return "assist"
        elif intent == "adapt_path":
            return "adapt"
        return "end"

    def _invoke_graph(self, initial_data: dict) -> dict:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        if not self.graph:
            return {"error": "AI-–∞–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."}

        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–ª—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        state: AgentState = {
            "messages": [],
            "user_analysis": None,
            "assistance_response": None,
            "adapted_difficulty": None,
            "adaptation_message": None,
            "error": None,
            **initial_data # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—è –∏–∑ initial_data
        }
        
        try:
            return self.graph.invoke(state)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞: {e}", exc_info=True)
            return {"error": str(e)}

    # --- –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è ---

    def provide_learning_assistance(self, user_id: str, question: str, topic: str = None, lesson_id: int = None) -> str:
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""
        result = self._invoke_graph({
            "user_id": user_id,
            "user_question": question,
            "topic": topic,
            "lesson_id": lesson_id,
            "intent": "assistance"
        })
        return result.get("assistance_response", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")

    def adapt_learning_path(self, user_id: str) -> Dict[str, Any]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        result = self._invoke_graph({
            "user_id": user_id,
            "intent": "adapt_path"
        })
        return {
            "difficulty": result.get("adapted_difficulty", "intermediate"),
            "message": result.get("adaptation_message", ""),
            "recommendations": result.get("user_analysis", {}).get("recommendations", [])
        }
    
    def get_personalized_encouragement(self, user_id: str, score: float, is_improvement: bool = False) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–æ—â—Ä–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–æ)."""
        if score >= 90:
            return "üåü –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ –æ—Ç–ª–∏—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞!"
        elif score >= 80:
            return "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã —Ö–æ—Ä–æ—à–æ —É—Å–≤–æ–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª!"
        elif is_improvement:
            return "üìà –ó–∞–º–µ—Ç–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        else:
            return "üí™ –ù–µ–ø–ª–æ—Ö–æ! –ï—â–µ –Ω–µ–º–Ω–æ–≥–æ —É—Å–∏–ª–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º!"

learning_agent = LearningAIAgent()